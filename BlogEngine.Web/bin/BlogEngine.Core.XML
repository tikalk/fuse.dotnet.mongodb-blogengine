<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlogEngine.Core</name>
    </assembly>
    <members>
        <member name="T:BlogEngine.Core.Providers.XmlBlogProvider">
            <summary>
            A storage provider for BlogEngine that uses XML files.
            <remarks>
            To build another provider, you can just copy and modify
            this one. Then add it to the web.config's BlogEngine section.
            </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
            <remarks>
            To build another provider, you can just copy and modify
            this one. Then add it to the web.config's BlogEngine section.
            </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
            <remarks>
            To build another provider, you can just copy and modify
            this one. Then add it to the web.config's BlogEngine section.
            </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
            <remarks>
            To build another provider, you can just copy and modify
            this one. Then add it to the web.config's BlogEngine section.
            </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
            <remarks>
            To build another provider, you can just copy and modify
            this one. Then add it to the web.config's BlogEngine section.
            </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
            <remarks>
            To build another provider, you can just copy and modify
            this one. Then add it to the web.config's BlogEngine section.
            </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
            <remarks>
            To build another provider, you can just copy and modify
            this one. Then add it to the web.config's BlogEngine section.
            </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
            <remarks>
            To build another provider, you can just copy and modify
            this one. Then add it to the web.config's BlogEngine section.
            </remarks>
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogProvider">
            <summary>
            A base class for all custom providers to inherit from.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectPost(System.Guid)">
            <summary>
            Retrieves a Post from the provider based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertPost(BlogEngine.Core.Post)">
            <summary>
            Inserts a new Post into the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdatePost(BlogEngine.Core.Post)">
            <summary>
            Updates an existing Post in the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeletePost(BlogEngine.Core.Post)">
            <summary>
            Deletes a Post from the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillPosts">
            <summary>
            Retrieves all Posts from the provider and returns them in a List.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectPage(System.Guid)">
            <summary>
            Retrieves a Page from the provider based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertPage(BlogEngine.Core.Page)">
            <summary>
            Inserts a new Page into the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdatePage(BlogEngine.Core.Page)">
            <summary>
            Updates an existing Page in the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeletePage(BlogEngine.Core.Page)">
            <summary>
            Deletes a Page from the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillPages">
            <summary>
            Retrieves all Pages from the provider and returns them in a List.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectProfile(System.String)">
            <summary>
            Retrieves a Page from the provider based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Inserts a new Page into the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdateProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Updates an existing Page in the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeleteProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Deletes a Page from the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillProfiles">
            <summary>
            Retrieves all Pages from the provider and returns them in a List.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectCategory(System.Guid)">
            <summary>
            Retrieves a Category from the provider based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertCategory(BlogEngine.Core.Category)">
            <summary>
            Inserts a new Category into the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdateCategory(BlogEngine.Core.Category)">
            <summary>
            Updates an existing Category in the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeleteCategory(BlogEngine.Core.Category)">
            <summary>
            Deletes a Category from the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillCategories">
            <summary>
            Retrieves all Categories from the provider and returns them in a List.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.LoadSettings">
            <summary>
            Loads the settings from the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SaveSettings(System.Collections.Specialized.StringDictionary)">
            <summary>
            Saves the settings to the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.LoadPingServices">
            <summary>
            Loads the ping services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SavePingServices(System.Collections.Specialized.StringCollection)">
            <summary>
            Saves the ping services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.LoadStopWords">
            <summary>
            Loads the stop words used in the search feature.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.LoadFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Loads settings from data store
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extensio Id</param>
            <returns>Settings as stream</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SaveToDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves settings to data store
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension Id</param>
            <param name="settings">Settings object</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.RemoveFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Removes settings from data store
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension Id</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectBlogRollItem(System.Guid)">
            <summary>
            Retrieves a BlogRoll from the provider based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Inserts a new BlogRoll into the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdateBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Updates an existing BlogRoll in the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeleteBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Deletes a BlogRoll from the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillBlogRoll">
            <summary>
            Retrieves all BlogRolls from the provider and returns them in a list.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectReferrer(System.Guid)">
            <summary>
            Retrieves a Referrer from the provider based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Inserts a new Referrer into the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdateReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Updates an existing Referrer in the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillReferrers">
            <summary>
            Deletes a Referrer from the data store specified by the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.StorageLocation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectPost(System.Guid)">
            <summary>
            Retrieves a post based on the specified Id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertPost(BlogEngine.Core.Post)">
            <summary>
            Inserts a new Post to the data store.
            </summary>
            <param name="post"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdatePost(BlogEngine.Core.Post)">
            <summary>
            Updates a Post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeletePost(BlogEngine.Core.Post)">
            <summary>
            Deletes a post from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillPosts">
            <summary>
            Retrieves all posts from the data store
            </summary>
            <returns>List of Posts</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectPage(System.Guid)">
            <summary>
            Retrieves a Page from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertPage(BlogEngine.Core.Page)">
            <summary>
            Inserts a new Page to the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdatePage(BlogEngine.Core.Page)">
            <summary>
            Updates a Page.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeletePage(BlogEngine.Core.Page)">
            <summary>
            Deletes a page from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillPages">
            <summary>
            Retrieves all pages from the data store
            </summary>
            <returns>List of Pages</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectCategory(System.Guid)">
            <summary>
            Gets a Category based on a Guid
            </summary>
            <param name="id">The category's Guid.</param>
            <returns>A matching Category</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertCategory(BlogEngine.Core.Category)">
            <summary>
            Inserts a Category
            </summary>
            <param name="category">Must be a valid Category object.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdateCategory(BlogEngine.Core.Category)">
            <summary>
            Updates a Category
            </summary>
            <param name="category">Must be a valid Category object.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeleteCategory(BlogEngine.Core.Category)">
            <summary>
            Deletes a Category
            </summary>
            <param name="category">Must be a valid Category object.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.WriteToFile">
            <summary>
            Saves the Categories to disk.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillCategories">
            <summary>
            Fills an unsorted list of categories.
            </summary>
            <returns>A List&lt;Category&gt; of all Categories.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectBlogRollItem(System.Guid)">
            <summary>
            Gets a BlogRoll based on a Guid.
            </summary>
            <param name="id">The BlogRoll's Guid.</param>
            <returns>A matching BlogRoll</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Inserts a BlogRoll
            </summary>
            <param name="blogRoll">Must be a valid BlogRoll object.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdateBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Updates a BlogRoll
            </summary>
            <param name="blogRoll">Must be a valid BlogRoll object.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeleteBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Deletes a BlogRoll
            </summary>
            <param name="blogRoll">Must be a valid BlogRoll object.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillBlogRoll">
            <summary>
            Fills an unsorted list of BlogRolls.
            </summary>
            <returns>A List&lt;BlogRoll&gt; of all BlogRolls</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.LoadPingServices">
            <summary>
            Loads the ping services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SavePingServices(System.Collections.Specialized.StringCollection)">
            <summary>
            Saves the ping services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.StorageLocation">
            <summary>
            The storage location is to allow Blog Providers to use alternative storage locations that app_data root directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.LoadSettings">
            <summary>
            Loads the settings from the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SaveSettings(System.Collections.Specialized.StringDictionary)">
            <summary>
            Saves the settings to the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.LoadStopWords">
            <summary>
            Loads the stop words used in the search feature.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.LoadFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Loads settings from generic data store
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension ID</param>
            <returns>Stream Settings</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SaveToDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Save settings to generic data store
            </summary>
            <param name="exType">Type of extension</param>
            <param name="exId">Extension ID</param>
            <param name="settings">Stream Settings</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.RemoveFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Removes settings from data store
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension Id</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.StorageLocation(BlogEngine.Core.DataStore.ExtensionType)">
            <summary>
            Data Store Location
            </summary>
            <param name="exType">Type of extension</param>
            <returns>Path to storage directory</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectReferrer(System.Guid)">
            <summary>
            Gets a Referrer based on the Id.
            </summary>
            <param name="Id">The Referrer's Id.</param>
            <returns>A matching Referrer.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Inserts a Referrer.
            </summary>
            <param name="referrer">Must be a valid Referrer object.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdateReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Updates a Referrer.
            </summary>
            <param name="referrer">Must be a valid Referrer object.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillReferrers">
            <summary>
            Fills an unsorted list of Referrers.
            </summary>
            <returns>A List&lt;Referrer&gt; of all Referrers.</returns>
        </member>
        <member name="T:BlogEngine.Core.IPublishable">
            <summary>
            An interface implemented by the classed that can be published.
            <remarks>
            To implemnet this interface means that the class can be searched
            from the search page and that it can be syndicated in RSS and ATOM.
            </remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.IPublishable.OnServing(BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the <see cref="E:Serving"/> event.
            </summary>
            <param name="eventArgs">The <see cref="T:BlogEngine.Core.ServingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Title">
            <summary>
            Gets the title of the object
            </summary>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.DateCreated">
            <summary>
            Gets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.DateModified">
            <summary>
            Gets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.RelativeLink">
            <summary>
            Gets the relative link.
            </summary>
            <value>The relative link.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.AbsoluteLink">
            <summary>
            Gets the absolute link.
            </summary>
            <value>The absolute link.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Author">
            <summary>
            Gets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.IsPublished">
            <summary>
            Gets whether or not this item is published.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.IsVisible">
            <summary>
            Gets whether or not this item should be shown.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.IsVisibleToPublic">
            <summary>
            Gets whether or not this item is visible to the public.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler">
            <summary>
            Summary description for TrackbackHandler
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
            implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> 
            object that provides references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.AddComment(System.String,BlogEngine.Core.Post,System.String,System.String,System.String)">
            <summary>
            Insert the pingback as a comment on the post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.ExamineSourcePage(System.String,System.String)">
            <summary>
            Parse the HTML of the source page.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.IsFirstPingBack(BlogEngine.Core.Post,System.String)">
            <summary>
            Checks to see if the source has already pinged the target.
            If it has, there is no reason to add it again.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.OnReceived(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.OnAccepted(System.String)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.OnRejected(System.String)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.OnSpammed(System.String)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.Received">
            <summary>
            Occurs when a hit is made to the trackback.axd handler.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.Accepted">
            <summary>
            Occurs when a trackback is accepted as valid and added as a comment.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.Rejected">
            <summary>
            Occurs when a trackback request is rejected because the sending
            website already made a trackback or pingback to the specific page.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.Spammed">
            <summary>
            Occurs when the request comes from a spammer.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler">
            <summary>
            Displays the open search XML provider as
            descriped at http://opensearch.a9.com/
            </summary>
            <remarks>
            The OpenSearch document needs to be linked to from the 
            HTML head tag. This link will be added automatically.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.RatingHandler">
            <summary>
            Receives and records all ratings comming in from the rating control.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.RatingHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
            implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> 
            object that provides references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.RatingHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:ManagedExtension">
            <summary>
            Serializable object that holds extension,
            extension attributes and methods
            </summary>
        </member>
        <member name="M:ManagedExtension.#ctor">
            <summary>
            Default constructor required for serialization
            </summary>
        </member>
        <member name="M:ManagedExtension.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Extension Name</param>
            <param name="version">Extension Version</param>
            <param name="desc">Description</param>
            <param name="author">Extension Author</param>
        </member>
        <member name="M:ManagedExtension.SaveSettings(ExtensionSettings)">
            <summary>
            Method to cache and serialize settings object
            </summary>
            <param name="settings">Settings object</param>
        </member>
        <member name="M:ManagedExtension.Initialized(ExtensionSettings)">
            <summary>
            Determine if settings has been initialized with default
            values (first time new extension loaded into the manager)
            </summary>
            <param name="settingName">Settings name</param>
            <returns>True if initialized</returns>
        </member>
        <member name="M:ManagedExtension.ContainsSetting(System.String)">
            <summary>
            Method to find out if extension has setting with this name
            </summary>
            <param name="settingName">Setting Name</param>
            <returns>True if settings with this name already exists</returns>
        </member>
        <member name="P:ManagedExtension.Name">
            <summary>
            Extension Name
            </summary>
        </member>
        <member name="P:ManagedExtension.Version">
            <summary>
            Extension Version
            </summary>
        </member>
        <member name="P:ManagedExtension.Priority">
            <summary>
            Extension Priority
            </summary>
        </member>
        <member name="P:ManagedExtension.Description">
            <summary>
            Extension Description
            </summary>
        </member>
        <member name="P:ManagedExtension.Author">
            <summary>
            Extension Author. Will show up in the settings page, can be used as a 
            link to author's home page 
            </summary>
        </member>
        <member name="P:ManagedExtension.AdminPage">
            <summary>
            Custom admin page. If defined, link to default settings
            page will be replaced by the link to this page in the UI
            </summary>
        </member>
        <member name="P:ManagedExtension.Enabled">
            <summary>
            Defines if extension is enabled.
            </summary>
        </member>
        <member name="P:ManagedExtension.Settings">
            <summary>
            Settings for the extension
            </summary>
        </member>
        <member name="P:ManagedExtension.ShowSettings">
            <summary>
            Show or hide settings in the admin/extensions list
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule">
            <summary>
            Removes or adds the www subdomain from all requests
            and makes a permanent redirection to the new location.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"></see>.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.Init(System.Web.HttpApplication)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.AddWww(System.Web.HttpContext)">
            <summary>
            Adds the www subdomain to the request and redirects.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.RemoveWww(System.Web.HttpContext)">
            <summary>
            Removes the www subdomain from the request and redirects.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.PermanentRedirect(System.String,System.Web.HttpContext)">
            <summary>
            Sends permanent redirection headers (301)
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler">
            <summary>
            Implements a custom handler to synchronously process HTTP Web requests for a syndication feed.
            </summary>
            <remarks>
            This handler can generate syndication feeds in a variety of formats and filtering 
            options based on the query string parmaeters provided.
            </remarks>
            <seealso cref="T:System.Web.IHttpHandler"/>
            <seealso cref="T:BlogEngine.Core.SyndicationGenerator"/>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements 
            the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides references 
            to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.GenerateItemList(System.Web.HttpContext)">
            <summary>
            Generates the list of feed items based on the URL.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.RecentComments">
            <summary>
            Creates a list of the most recent comments
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.ConvertToIPublishable(BlogEngine.Core.IPublishable)">
            <summary>
            A converter delegate used for converting Results to Posts.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.RetrieveFormat(System.Web.HttpContext)">
            <summary>
            Retrieves the syndication format from the urL parameters.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.SetHeaderInformation(System.Web.HttpContext,System.Collections.Generic.List{BlogEngine.Core.IPublishable},BlogEngine.Core.SyndicationFormat)">
            <summary>
            Sets the response header information.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, <b>Request</b>, <b>Response</b>, <b>Session</b>, and <b>Server</b>) used to service HTTP requests.</param>
            <param name="items">The collection of <see cref="T:BlogEngine.Core.IPublishable"/> instances used when setting the response header details.</param>
            <param name="format">The format of the syndication feed being generated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is a null reference (Nothing in Visual Basic) -or- the <paramref name="posts"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Utils">
            <summary>
            Utilities for the entire solution to use.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.RemoveIllegalCharacters(System.String)">
            <summary>
            Strips all illegal characters from the specified title.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.StripHtml(System.String)">
            <summary>
            Strips all HTML tags from the specified string.
            </summary>
            <param name="html">The string containing HTML</param>
            <returns>A string without HTML tags</returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.RemoveHtmlWhitespace(System.String)">
            <summary>
            Removes the HTML whitespace.
            </summary>
            <param name="html">The HTML.</param>
        </member>
        <member name="M:BlogEngine.Core.Utils.SetConditionalGetHeaders(System.DateTime)">
            <summary>
            Writes ETag and Last-Modified headers and sets the conditional get headers.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:BlogEngine.Core.Utils.Log(System.Object)">
            <summary>
            Sends a message to any subscribed log listeners.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:BlogEngine.Core.Utils.ConvertToAbsolute(System.Uri)">
            <summary>
            Converts a relative URL to an absolute one.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.ConvertToAbsolute(System.String)">
            <summary>
            Converts a relative URL to an absolute one.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlogEngine.Core.Utils.GetSubDomain(System.Uri)" -->
        <member name="M:BlogEngine.Core.Utils.Translate(System.String)">
            <summary>
            Translates the specified string using the resource files.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.Translate(System.String,System.String)">
            <summary>
            Translates the specified string using the resource files.  If a translation
            is not found, defaultValue will be returned.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.Translate(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Translates the specified string using the resource files and specified culture.
            If a translation is not found, defaultValue will be returned.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.GetDefaultCulture">
            <summary>
            Returns the default culture.  This is either the culture specified in the blog settings,
            or the default culture installed with the operating system.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.SendMailMessage(System.Net.Mail.MailMessage)">
            <summary>
            Sends a MailMessage object using the SMTP settings.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.SendMailMessageAsync(System.Net.Mail.MailMessage)">
            <summary>
            Sends the mail message asynchronously in another thread.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:BlogEngine.Core.Utils.CodeAssemblies">
            <summary>
            This method returns all code assemblies in app_code
            If app_code has subdirectories for c#, vb.net etc
            Each one will come back as a separate assembly
            So we can support extensions in multiple languages
            </summary>
            <returns>List of code assemblies</returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.LoadExtensions">
            <summary>
            Run through all code assemblies and creates object
            instance for types marked with extension attribute
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.GetCompiledExtensions(System.Collections.ArrayList)">
            <summary>
            To support compiled extensions
            This methed looks for DLLs in the "/bin" folder
            and if assembly compiled with configuration
            attributed set to "BlogEngineExtension" it will
            be added to the list of code assemlies
            </summary>
            <param name="assemblies">List of code assemblies</param>
        </member>
        <member name="M:BlogEngine.Core.Utils.FindSemanticDocuments(System.Uri,System.String)">
            <summary>
            Finds the semantic documents from a URL based on the type.
            </summary>
            <param name="url">The URL of the semantic document or a document containing semantic links.</param>
            <param name="type">The type. Could be "foaf", "apml" or "sioc".</param>
            <returns>A dictionary of the semantic documents. The dictionary is empty if no documents were found.</returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.DownloadWebPage(System.Uri)">
            <summary>
            Downloads a web page from the Internet and returns the HTML as a string. .
            </summary>
            <param name="url">The URL to download from.</param>
            <returns>The HTML or null if the URL isn't valid.</returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.FindLinks(System.String,System.String)">
            <summary>
            Finds semantic links in a given HTML document.
            </summary>
            <param name="type">The type of link. Could be foaf, apml or sioc.</param>
            <param name="html">The HTML to look through.</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.HashPassword(System.String)">
            <summary>
            Encrypts a string using the SHA256 algorithm.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Utils.OnLog">
            <summary>
            Occurs when a message will be logged. The sender is a string containing the log message.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Utils.FeedUrl">
            <summary>
            Gets the relative URL of the blog feed. If a Feedburner username
            is entered in the admin settings page, it will return the 
            absolute Feedburner URL to the feed.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Utils.RelativeWebRoot">
            <summary>
            Gets the relative root of the website.
            </summary>
            <value>A string that ends with a '/'.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.AbsoluteWebRoot">
            <summary>
            Gets the absolute root of the website.
            </summary>
            <value>A string that ends with a '/'.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.IsMobile">
            <summary>
            Gets a value indicating whether the client is a mobile device.
            </summary>
            <value><c>true</c> if this instance is mobile; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.IsMono">
            <summary>
            Gets a value indicating whether we're running under Mono.
            </summary>
            <value><c>true</c> if Mono; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.IsLinux">
            <summary>
            Gets a value indicating whether we're running under Linux or a Unix variant.
            </summary>
            <value><c>true</c> if Linux/Unix; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:BlogEngine.Core.Utils.EmailSent">
            <summary>
            Occurs after an e-mail has been sent. The sender is the MailMessage object.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Utils.EmailFailed">
            <summary>
            Occurs after an e-mail has been sent. The sender is the MailMessage object.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Ping.Pingback">
            <summary>
            Sends pingbacks to website that the blog links to.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Pingback.Send(System.Uri,System.Uri)">
            <summary>
            Sends pingbacks to the targetUrl.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Pingback.AddXmlToRequest(System.Uri,System.Uri,System.Net.HttpWebRequest)">
            <summary>
            Adds the XML to web request. The XML is the standard
            XML used by RPC-XML requests.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Ping.Pingback.Sending">
            <summary>
            Occurs just before a pingback is sent.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Ping.Pingback.Sent">
            <summary>
            Occurs when a pingback has been sent
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.PostViewBase">
            <summary>
            The PostView.ascx that is located in the themes folder
            has to inherit from this class. 
            <remarks>
            It provides the basic functionaly needed to display a post.
            </remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PostViewBase.Page_Load(System.Object,System.EventArgs)">
            <summary>
            Lets process our .Body content and build up our controls collection
            inside the 'BodyContent' placeholder.
            
            User controls are insterted into the blog in the following format..
            [UserControl:~/path/usercontrol.ascx]
            
            TODO : Expose user control parameters.
            
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PostViewBase.OnInit(System.EventArgs)">
            <summary>
            Shows the post if it isn\t published.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PostViewBase.CategoryLinks(System.String)">
            <summary>
            Displays the Post's categories seperated by the specified string.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PostViewBase.TagLinks(System.String)">
            <summary>
            Displays the Post's tags seperated by the specified string.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Post">
            <summary>
            The Post object that is displayed through the PostView.ascx control.
            </summary>
            <value>The Post object that has to be displayed.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.ContentBy">
            <summary>
            The criteria by which the content is being served (by tag, category, author, etc).
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Location">
            <summary>
            The location where the serving takes place.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.ShowExcerpt">
            <summary>
            Gets or sets whether or not to show the entire post or just the excerpt/description.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.DescriptionCharacters">
            <summary>
            Gets or sets a value indicating how many characters should be shown of the description.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Index">
            <summary>
            The index of the post in a list of posts displayed
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Body">
            <summary>
            Gets the body of the post. Important: use this instead of Post.Content.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.CommentFeed">
            <summary>
            Gets the comment feed link.
            </summary>
            <value>The comment feed.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.AdminLinks">
            <summary>
            Displays an Edit and Delete link to any 
            authenticated user.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Rating">
            <summary>
            Enable visitors to rate the post.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.SiteMap">
            <summary>
            A blog sitemap suitable for Google Sitemap as well as
            other big search engines such as MSN/Live, Yahoo and Ask.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SiteMap.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
            implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> 
            object that provides references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.SiteMap.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom 
            HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides 
            references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler.RetrieveLocalScript(System.String)">
            <summary>
            Retrieves the local script from the disk
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler.RetrieveRemoteScript(System.String)">
            <summary>
            Retrieves the specified remote script using a WebClient.
            </summary>
            <param name="file">The remote URL</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler.StripWhitespace(System.String,System.Boolean)">
            <summary>
            Strips the whitespace from any .css file.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler.SetHeaders(System.Int32,System.Web.HttpContext)">
            <summary>
            This will make the browser and server keep the output
            in its cache and thereby improve performance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.DbMembershipProvider">
            <summary>
            Generic Db Membership Provider
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider
            </summary>
            <param name="name">Configuration name</param>
            <param name="config">Configuration settings</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Add new user to database
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="passwordQuestion"></param>
            <param name="passwordAnswer"></param>
            <param name="isApproved"></param>
            <param name="providerUserKey"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="newPasswordQuestion"></param>
            <param name="newPasswordAnswer"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change the password if the old password matches what is stored
            </summary>
            <param name="username"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Update User Data (not password)
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Check username and password
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.UnlockUser(System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Get User by providerUserKey
            </summary>
            <param name="providerUserKey"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Get User by username
            </summary>
            <param name="username"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Retrieve UserName for given email
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Delete user from database
            </summary>
            <param name="username"></param>
            <param name="deleteAllRelatedData"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Return all users in MembershipUserCollection
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Not implemented
            </summary>
            <param name="usernameToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Not implemented
            </summary>
            <param name="emailToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.EnablePasswordRetrieval">
            <summary>
            Can password be retrieved via email?
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.EnablePasswordReset">
            <summary>
            Hardcoded to false
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.RequiresQuestionAndAnswer">
            <summary>
            Hardcoded to false
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.ApplicationName">
            <summary>
            Returns the application name as set in the web.config
            otherwise returns BlogEngine.  Set will throw an error.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
            Hardcoded to 5
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.PasswordAttemptWindow">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.RequiresUniqueEmail">
            <summary>
            Hardcoded to false
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.PasswordFormat">
            <summary>
            Password format (Clear or Hashed)
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.MinRequiredPasswordLength">
            <summary>
            Hardcoded to 4
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            Hardcoded to 0
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.PasswordStrengthRegularExpression">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Comment">
            <summary>
            Represents a comment to a blog post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Comment.CompareTo(BlogEngine.Core.Comment)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. The return value has the following meanings: 
            Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnServing(BlogEngine.Core.Comment,BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnServing(BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the Serving event
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnApproving(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnApproved(BlogEngine.Core.Comment)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnSpamAttack">
            <summary>
            Raises the SpamAttack event in a safe way
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Id">
            <summary>
            The Id of the comment.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.ParentId">
            <summary>
            The Id of the parent comment.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Comments">
            <summary>
            The Id of the comment.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Website">
            <summary>
            Gets or sets the website.
            </summary>
            <value>The website.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Teaser">
            <summary>
            Abbreviated content
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.IP">
            <summary>
            Gets or sets the IP address.
            </summary>
            <value>The IP.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.ModeratedBy">
            <summary>
             Process that approved or rejected comment
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Avatar">
            <summary>
            The Avatar of the comment.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsApproved">
            <summary>
            Gets or sets the Comment approval status
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsPublished">
            <summary>
            Gets whether or not this comment has been published
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsVisible">
            <summary>
            Gets whether or not this comment should be shown
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsVisibleToPublic">
            <summary>
            Gets whether or not this comment is visible to visitors not logged into the blog.
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Comment.DateCreated">
            <summary>
            Gets or sets when the comment was created.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Title">
            <summary>
            Gets the title of the object
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Comment.RelativeLink">
            <summary>
            Gets the relative link of the comment.
            </summary>
            <value>The relative link.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.AbsoluteLink">
            <summary>
            Gets the absolute link.
            </summary>
            <value>The absolute link.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Description">
            <summary>
            Gets the description. Returns always string.empty.
            </summary>
            <value>The description.</value>
        </member>
        <member name="E:BlogEngine.Core.Comment.Serving">
            <summary>
            Occurs when the post is being served to the output stream.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Comment.Approving">
            <summary>
            Occurs just before a comment is approved by the comment moderator.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Comment.Approved">
            <summary>
            Occurs after a comment is approved by the comment moderator.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Comment.SpamAttack">
            <summary>
            Occurs when the page is being attacked by robot spam.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.FileHandler">
            <summary>
            The FileHandler serves all files that is uploaded from
            the admin pages except for images. 
            </summary>
            <remarks>
            By using a HttpHandler to serve files, it is very easy
            to add the capability to stop bandwidth leeching or
            to create a statistics analysis feature upon it.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FileHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
            implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> 
            object that provides references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FileHandler.SetContentType(System.Web.HttpContext,System.String)">
            <summary>
            Sets the content type depending on the filename's extension.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FileHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.FileHandler.Serving">
            <summary>
            Occurs when the requested file does not exist;
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.FileHandler.Served">
            <summary>
            Occurs when a file is served;
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.FileHandler.BadRequest">
            <summary>
            Occurs when the requested file does not exist;
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Search">
            <summary>
            Searches the post collection and returns a result based on a search term.
            <remarks>It is used for related posts and the in-site search feature.</remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.Post_Saved(System.Object,BlogEngine.Core.SavedEventArgs)">
            <summary>
            Adds a post to the catalog when it is added.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.Hits(System.String,System.Boolean)">
            <summary>
            Searches all the posts and returns a ranked result set.
            </summary>
            <param name="searchTerm">The term to search for</param>
            <param name="includeComments">True to include a post's comments and their authors in search</param>
        </member>
        <member name="M:BlogEngine.Core.Search.FindRelatedItems(BlogEngine.Core.IPublishable)">
            <summary>
            Returns a list of posts that is related to the specified post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.BuildResultSet(System.String,System.Boolean)">
            <summary>
            Builds the results set and ranks it.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.ResultToPost(BlogEngine.Core.Result)">
            <summary>
            A converter delegate used for converting Results to Posts.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.BuildCatalog">
            <summary>
            Builds the catalog so it can be searched.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.AddItem(BlogEngine.Core.IPublishable)">
            <summary>
            Adds an IPublishable item to the search catalog. 
            That will make it immediately searchable.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.CleanContent(System.String,System.Boolean)">
            <summary>
            Removes stop words and HTML from the specified string.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.OnSearcing(System.String)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.OnIndexBuilding">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.OnIndexBuild">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Search.Searching">
            <summary>
            Occurs when a search is performed. (The search term is the sender).
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Search.IndexBuilding">
            <summary>
            Occurs just before the search index is being build.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Search.IndexBuild">
            <summary>
            Occurs after the index has been build.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Entry">
            <summary>
            A search optimized post object cleansed from HTML and stop words.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Entry.Item">
            <summary>The post object reference</summary>
        </member>
        <member name="F:BlogEngine.Core.Entry.Title">
            <summary>The title of the post cleansed for stop words</summary>
        </member>
        <member name="F:BlogEngine.Core.Entry.Content">
            <summary>The content of the post cleansed for stop words and HTML</summary>
        </member>
        <member name="T:BlogEngine.Core.Result">
            <summary>
            A result is a search result which contains a post and its ranking.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Result.Rank">
            <summary>
            The rank of the post based on the search term. The higher the rank, the higher the post is in the result set.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Result.Item">
            <summary>
            The post of the result.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Result.CompareTo(BlogEngine.Core.Result)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value 
            has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero 
            This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler">
            <summary>
            Exports all posts to the BlogML xml format.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server 
            objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.WriteXml(System.Web.HttpContext)">
            <summary>
            Writes the BlogML to the output stream.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostName(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            The post-name element contains the same as the title.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter">
            <summary>
            The RewriteFormHtmlTextWriter class implements Form action tag rewriting for rewritten pages 
            on Mono.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter.#ctor(System.Web.UI.Html32TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)">
            <summary>
            Writes the specified markup attribute and value to the output stream, and, if specified, writes the value encoded.
            </summary>
            <param name="name">The markup attribute to write to the output stream.</param>
            <param name="value">The value assigned to the attribute.</param>
            <param name="fEncode">true to encode the attribute and its assigned value; otherwise, false.</param>
        </member>
        <member name="T:BlogEngine.Core.Providers.DbBlogProvider">
            <summary>
            Generic Database BlogProvider
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider
            </summary>
            <param name="name">Configuration name</param>
            <param name="config">Configuration settings</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectPost(System.Guid)">
            <summary>
            Returns a Post based on Id
            </summary>
            <param name="id">PostID</param>
            <returns>post</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertPost(BlogEngine.Core.Post)">
            <summary>
            Adds a new post to database
            </summary>
            <param name="post">new post</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdatePost(BlogEngine.Core.Post)">
            <summary>
            Saves and existing post in the database
            </summary>
            <param name="post">post to be saved</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeletePost(BlogEngine.Core.Post)">
            <summary>
            Deletes a post in the database
            </summary>
            <param name="post">post to delete</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillPosts">
            <summary>
            Gets all post from the database
            </summary>
            <returns>List of posts</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectPage(System.Guid)">
            <summary>
            Returns a page for given ID
            </summary>
            <param name="id">ID of page to return</param>
            <returns>selected page</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertPage(BlogEngine.Core.Page)">
            <summary>
            Adds a page to the database
            </summary>
            <param name="page">page to be added</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdatePage(BlogEngine.Core.Page)">
            <summary>
            Saves an existing page in the database
            </summary>
            <param name="page">page to be saved</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeletePage(BlogEngine.Core.Page)">
            <summary>
            Deletes a page from the database
            </summary>
            <param name="page">page to be deleted</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillPages">
            <summary>
            Gets all pages in database
            </summary>
            <returns>List of pages</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectCategory(System.Guid)">
            <summary>
            Returns a category 
            </summary>
            <param name="id">Id of category to return</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertCategory(BlogEngine.Core.Category)">
            <summary>
            Adds a new category to the database
            </summary>
            <param name="category">category to add</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateCategory(BlogEngine.Core.Category)">
            <summary>
            Saves an existing category to the database
            </summary>
            <param name="category">category to be saved</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteCategory(BlogEngine.Core.Category)">
            <summary>
            Deletes a category from the database
            </summary>
            <param name="category">category to be removed</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillCategories">
            <summary>
            Gets all categories in database
            </summary>
            <returns>List of categories</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectBlogRollItem(System.Guid)">
            <summary>
            Gets a BlogRoll based on a Guid.
            </summary>
            <param name="id">The BlogRoll's Guid.</param>
            <returns>A matching BlogRoll</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Adds a new BlogRoll to the database.
            </summary>
            <param name="blogRoll">BlogRoll to add.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Saves an existing BlogRoll to the database
            </summary>
            <param name="blogRollItem">BlogRoll to be saved</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Deletes a BlogRoll from the database
            </summary>
            <param name="blogRoll">BlogRoll to be removed</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillBlogRoll">
            <summary>
            Gets all BlogRolls in database
            </summary>
            <returns>List of BlogRolls</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectReferrer(System.Guid)">
            <summary>
            Gets a Referrer based on an Id.
            </summary>
            <param name="id">The Referrers's Guid.</param>
            <returns>A matching Referrer</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Adds a new Referrer to the database.
            </summary>
            <param name="referrer">Referrer to add.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Saves an existing Referrer to the database.
            </summary>
            <param name="referrer">Referrer to be saved.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillReferrers">
            <summary>
            Gets all Referrers from the database.
            </summary>
            <returns>List of Referrers.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.LoadSettings">
            <summary>
            Gets the settings from the database
            </summary>
            <returns>dictionary of settings</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SaveSettings(System.Collections.Specialized.StringDictionary)">
            <summary>
            Saves the settings to the database
            </summary>
            <param name="settings">dictionary of settings</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.LoadPingServices">
            <summary>
            Gets the PingServices from the database
            </summary>
            <returns>collection of PingServices</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SavePingServices(System.Collections.Specialized.StringCollection)">
            <summary>
            Saves the PingServices to the database
            </summary>
            <param name="services">collection of PingServices</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.LoadStopWords">
            <summary>
            Get stopwords from the database
            </summary>
            <returns>collection of stopwords</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.LoadFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Load user data from DataStore
            </summary>
            <param name="exType">type of info</param>
            <param name="exId">id of info</param>
            <returns>stream of detail data</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SaveToDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Save to DataStore
            </summary>
            <param name="exType">type of info</param>
            <param name="exId">id of info</param>
            <param name="settings">data of info</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.RemoveFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Deletes an item from the dataStore
            </summary>
            <param name="exType">type of item</param>
            <param name="exId">id of item</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.StorageLocation">
            <summary>
            Storage location on web server
            </summary>
            <returns>string with virtual path to storage</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectProfile(System.String)">
            <summary>
            Loads AuthorProfile from database
            </summary>
            <param name="id">username</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Adds AuthorProfile to database
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Updates AuthorProfile to database
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Remove AuthorProfile from database
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillProfiles">
            <summary>
            Return collection for AuthorProfiles from database
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.StateList`1">
            <summary>
            A generic collection with the ability to 
            check if it has been changed.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.StateList`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.StateList`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.StateList`1.MarkOld">
            <summary>
            Marks the object as being clean, 
            which means not changed.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.StateList`1.IsChanged">
            <summary>
            Gets if this object's data has been changed.
            </summary>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="T:BlogEngine.Core.Ping.PingService">
            <summary>
            Pings various blog ping services.
            <remarks>
            Whenever a post is created or updated, it is important
            to notify the ping services so that they have the latest
            updated posts from the blog.
            </remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.PingService.Send(System.Uri)">
            <summary>
            Sends a ping to various ping services asynchronously.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.PingService.Execute(System.String,System.Uri)">
            <summary>
            Creates a web request and invokes the response asynchronous.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.PingService.AddXmlToRequest(System.Net.HttpWebRequest,System.Uri)">
            <summary>
            Adds the XML to web request. The XML is the standard
            XML used by RPC-XML requests.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler">
            <summary>
            HTTP Handler for MetaWeblog API
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Process the HTTP Request.  Create XMLRPC request, find method call, process it and create response object and sent it back.
            This is the heart of the MetaWeblog API
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.NewPost(System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAPost,System.Boolean)">
            <summary>
            metaWeblog.newPost
            </summary>
            <param name="blogID">always 1000 in BlogEngine since it is a singlar blog instance</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <param name="sentPost">struct with post details</param>
            <param name="publish">mark as published?</param>
            <returns>postID as string</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.EditPost(System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAPost,System.Boolean)">
            <summary>
            metaWeblog.editPost
            </summary>
            <param name="postID">post guid in string format</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <param name="sentPost">struct with post details</param>
            <param name="publish">mark as published?</param>
            <returns>1 if successful</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetPost(System.String,System.String,System.String)">
            <summary>
            metaWeblog.getPost
            </summary>
            <param name="postID">post guid in string format</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <returns>struct with post details</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.NewMediaObject(System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAMediaObject,System.Web.HttpContext)">
            <summary>
            metaWeblog.newMediaObject
            </summary>
            <param name="blogID">always 1000 in BlogEngine since it is a singlar blog instance</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <param name="mediaObject">struct with media details</param>
            <param name="request">The HTTP request.</param>
            <returns>struct with url to media</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetCategories(System.String,System.String,System.String,System.String)">
            <summary>
            metaWeblog.getCategories
            </summary>
            <param name="blogID">always 1000 in BlogEngine since it is a singlar blog instance</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <param name="rootUrl">The root URL.</param>
            <returns>array of category structs</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetKeywords(System.String,System.String,System.String)">
            <summary>
            wp.getTags
            </summary>
            <param name="blogID"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns>list of tags</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetRecentPosts(System.String,System.String,System.String,System.Int32)">
            <summary>
            metaWeblog.getRecentPosts
            </summary>
            <param name="blogID">always 1000 in BlogEngine since it is a singlar blog instance</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <param name="numberOfPosts">number of posts to return</param>
            <returns>array of post structs</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetUserBlogs(System.String,System.String,System.String,System.String)">
            <summary>
            blogger.getUsersBlogs
            </summary>
            <param name="appKey">Key from application.  Outdated methodology that has no use here.</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <param name="rootUrl">The root URL.</param>
            <returns>array of blog structs</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.DeletePost(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            blogger.deletePost
            </summary>
            <param name="appKey">Key from application.  Outdated methodology that has no use here.</param>
            <param name="postID">post guid in string format</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <param name="publish">mark as published?</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.NewPage(System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAPage,System.Boolean)">
            <summary>
            wp.newPage
            </summary>
            <param name="blogID">blogID in string format</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <param name="mPage"></param>
            <param name="publish"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetPages(System.String,System.String,System.String)">
            <summary>
            wp.getPages
            </summary>
            <param name="blogID">blogID in string format</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetPage(System.String,System.String,System.String,System.String)">
            <summary>
            wp.getPage
            </summary>
            <param name="blogID">blogID in string format</param>
            <param name="pageID">page guid in string format</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <returns>struct with post details</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.ValidateRequest(System.String,System.String)">
            <summary>
            Checks username and password.  Throws error if validation fails.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.LookupCategoryGuidByName(System.String,BlogEngine.Core.Category@)">
            <summary>
            Returns Category Guid from Category name.
            </summary>
            <remarks>
            Reverse dictionary lookups are ugly.
            </remarks>
            <param name="name"></param>
            <param name="cat"></param>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MetaWeblogException">
            <summary>
            Exception specifically for MetaWeblog API.  Error (or fault) responses 
            request a code value.  This is our chance to add one to the exceptions
            which can be used to produce a proper fault.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogException.#ctor(System.String,System.String)">
            <summary>
            Constructor to load properties
            </summary>
            <param name="code">Fault code to be returned in Fault Response</param>
            <param name="message">Message to be returned in Fault Response</param>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.MetaWeblogException.Code">
            <summary>
            Code is actually for Fault Code.  It will be passed back in the 
            response along with the error message.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWACategory">
            <summary>
            MetaWeblog Category struct
            returned as an array from GetCategories
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.description">
            <summary>
            Category title
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.htmlUrl">
            <summary>
            Url to thml display of category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.rssUrl">
            <summary>
            Url to RSS for category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.id">
            <summary>
            The guid of the category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.title">
            <summary>
            The title/name of the category
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWABlogInfo">
            <summary>
            MetaWeblog BlogInfo struct
            returned as an array from getUserBlogs
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWABlogInfo.url">
            <summary>
            Blog Url
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWABlogInfo.blogID">
            <summary>
            Blog ID (Since BlogEngine.NET is single instance this number is always 10.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWABlogInfo.blogName">
            <summary>
            Blog Title
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAFault">
            <summary>
            MetaWeblog Fault struct
            returned when error occurs
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAFault.faultCode">
            <summary>
            Error code of Fault Response
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAFault.faultString">
            <summary>
            Message of Fault Response
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAMediaObject">
            <summary>
            MetaWeblog MediaObject struct
            passed in the newMediaObject call
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAMediaObject.name">
            <summary>
            Name of media object (filename)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAMediaObject.type">
            <summary>
            Type of file
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAMediaObject.bits">
            <summary>
            Media
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAMediaInfo">
            <summary>
            MetaWeblog MediaInfo struct
            returned from NewMediaObject call
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAMediaInfo.url">
            <summary>
            Url that points to Saved MediaObejct
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAPost">
            <summary>
            MetaWeblog Post struct
            used in newPost, editPost, getPost, recentPosts
            not all properties are used everytime.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.postID">
            <summary>
            PostID Guid in string format
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.title">
            <summary>
            Title of Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.link">
            <summary>
            Link to Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.description">
            <summary>
            Content of Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.categories">
            <summary>
            List of Categories assigned for Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.tags">
            <summary>
            List of Tags assinged for Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.postDate">
            <summary>
            Display date of Blog Post (DateCreated)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.publish">
            <summary>
            Whether the Post is published or not.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.slug">
            <summary>
            Slug of post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.commentPolicy">
            <summary>
            CommentPolicy (Allow/Deny)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.excerpt">
            <summary>
            Excerpt
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.author">
            <summary>
            wp_author_id
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAPage">
            <summary>
            wp Page Struct
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.pageID">
            <summary>
            PostID Guid in string format
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.title">
            <summary>
            Title of Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.link">
            <summary>
            Link to Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.description">
            <summary>
            Content of Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.pageDate">
            <summary>
            Display date of Blog Post (DateCreated)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.mt_convert_breaks">
            <summary>
            Convert Breaks
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.pageParentID">
            <summary>
            Page Parent ID
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.mt_keywords">
            <summary>
            Page keywords
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAAuthor">
            <summary>
            wp Author struct
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.user_id">
            <summary>
            userID - Specs call for a int, but our ID is a string.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.user_login">
            <summary>
            user login name
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.display_name">
            <summary>
            display name
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.user_email">
            <summary>
            user email
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.meta_value">
            <summary>
            nothing to see here.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.RsdHandler">
            <summary>
            RSD (Really Simple Discoverability) Handler
            http://cyber.law.harvard.edu/blogs/gems/tech/rsd.html
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.RsdHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Process to return RSD page.
            </summary>
            <param name="context">context</param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.RsdHandler.IsReusable">
            <summary>
            IsReusable implmentation for IHttpHandler
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.XmlMembershipProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Returns true if the username and password match an exsisting user.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Retrieves a user based on his/hers username.
            the userIsOnline parameter is ignored.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Retrieves a collection of all the users.
            This implementation ignores pageIndex and pageSize,
            and it doesn't sort the MembershipUser objects returned.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes a users password.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Creates a new user store he/she in the XML file
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Deletes the user from the XML file and 
            removes him/her from the internal cache.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Get a user based on the username parameter.
            the userIsOnline parameter is ignored.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Retrieves a username based on a matching email.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates a user. The username will not be changed.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ReadMembershipDataStore">
            <summary>
            Builds the internal cache of users.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.UnlockUser(System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="emailToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="usernameToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="newPasswordQuestion"></param>
            <param name="newPasswordAnswer"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetPassword(System.String)">
            <summary>
            Gets the password for the user with the given username.
            </summary>
            <param name="username">the given username</param>
            <returns>the password if user is found, null otherwise.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            Gets the password for the specified user name from the data source.
            </summary>
            <param name="username">The user to retrieve the password for.</param>
            <param name="answer">The password answer for the user.</param>
            <returns>
            The password for the specified user name.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.ApplicationName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.EnablePasswordRetrieval">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.EnablePasswordReset">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.MinRequiredPasswordLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.PasswordAttemptWindow">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.PasswordFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.PasswordStrengthRegularExpression">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.RequiresQuestionAndAnswer">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.RequiresUniqueEmail">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExtensionSettings">
            <summary>
            Serializable object that holds collection of
            parameters and methods to manipulate them 
            </summary>
        </member>
        <member name="M:ExtensionSettings.#ctor">
            <summary>
            Default constructor requried for serialization
            </summary>
        </member>
        <member name="M:ExtensionSettings.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="extensionName">Extension Name</param>
        </member>
        <member name="M:ExtensionSettings.AddParameter(System.String)">
            <summary>
            Add parameter to settings object by name
            rest of the attributes will be set to defaults
            </summary>
            <param name="name">Parameter Name</param>
        </member>
        <member name="M:ExtensionSettings.AddParameter(System.String,System.String)">
            <summary>
            Add Parameter to settings
            </summary>
            <param name="name">Parameter Name</param>
            <param name="label">Parameter Label, used in the UI</param>
        </member>
        <member name="M:ExtensionSettings.AddParameter(System.String,System.String,System.Int32)">
            <summary>
            Add Parameter to settings
            </summary>
            <param name="name">Parameter Name</param>
            <param name="label">Parameter Label</param>
            <param name="maxLength">Maximum number of chars values will hold</param>
        </member>
        <member name="M:ExtensionSettings.AddParameter(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Add Parameter to settings
            </summary>
            <param name="name">Parameter Name</param>
            <param name="label">Parameter Label</param>
            <param name="maxLength">Maximum Length</param>
            <param name="required">Set if value in the parameter required when added/apdated</param>
        </member>
        <member name="M:ExtensionSettings.AddParameter(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Add Parameter
            </summary>
            <param name="name">Parameter Name</param>
            <param name="label">Parameter Label</param>
            <param name="maxLength">Maximum Length</param>
            <param name="required">Set if value in the parameter required when added/apdated</param>
            <param name="keyfield">Mark field as primary key, unique and required</param>
        </member>
        <member name="M:ExtensionSettings.AddParameter(System.String,System.String,System.Int32,System.Boolean,System.Boolean,ParameterType)">
            <summary>
            Add Parameter
            </summary>
            <param name="name">Parameter Name</param>
            <param name="label">Parameter Label</param>
            <param name="maxLength">Maximum Length</param>
            <param name="required">Set if value in the parameter required when added/apdated</param>
            <param name="keyfield">Mark field as primary key, unique and required</param>
            <param name="parType">Parameter type (integer, string, boolean etc.)</param>
        </member>
        <member name="M:ExtensionSettings.IsRequiredParameter(System.String)">
            <summary>
            Returns true if values in the parameter required
            </summary>
            <param name="paramName">Parameter Name</param>
            <returns></returns>
        </member>
        <member name="M:ExtensionSettings.IsKeyValueExists(System.String)">
            <summary>
            Returns true if value that user entered
            exists in the parameter used as primary key
            </summary>
            <param name="newVal">Value entered</param>
            <returns>True if value exists</returns>
        </member>
        <member name="M:ExtensionSettings.IsOldValue(System.String,System.String,System.Int32)">
            <summary>
            Compare value in the parameters collection
            with one in the grid. Return true if value 
            in the grid is the same (old value).
            </summary>
            <param name="parName">Parameter Name</param>
            <param name="val">Value in the grid view</param>
            <param name="rowIndex">Row in the grid view</param>
            <returns></returns>
        </member>
        <member name="M:ExtensionSettings.GetLabel(System.String)">
            <summary>
            Method to get description of the parameter
            </summary>
            <param name="parameterName">Parameter Name</param>
            <returns>Parameter Description(label)</returns>
        </member>
        <member name="M:ExtensionSettings.SetParameterType(System.String,ParameterType)">
            <summary>
            Set parameter type (int, bool etc.)
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="t">Parameter type</param>
        </member>
        <member name="M:ExtensionSettings.GetParameterType(System.String)">
            <summary>
            Get parameter type. All valid types defined in the ParameterType enum
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter type</returns>
        </member>
        <member name="M:ExtensionSettings.AddValue(System.String,System.String)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:ExtensionSettings.AddValue(System.String,System.Boolean)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:ExtensionSettings.AddValue(System.String,System.Int32)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:ExtensionSettings.AddValue(System.String,System.Int64)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:ExtensionSettings.AddValue(System.String,System.Single)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:ExtensionSettings.AddValue(System.String,System.Double)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:ExtensionSettings.AddValue(System.String,System.Decimal)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:ExtensionSettings.AddValue(System.String,System.String[],System.String)">
            <summary>
            Add value to the list data type
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="items">List of values</param>
            <param name="selected">Selected value</param>
        </member>
        <member name="M:ExtensionSettings.AddValue(System.String,System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Add value to the list data type
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="items">List of values</param>
            <param name="selected">Selected value</param>
        </member>
        <member name="M:ExtensionSettings.AddObjectValue(System.String,System.Object)">
            <summary>
            Add value to the parameter and assign data type
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:ExtensionSettings.UpdateScalarValue(System.String,System.String)">
            <summary>
            Update parameter that has only one value
            </summary>
            <param name="parameterName">Parameter Name</param>
            <param name="val">Value</param>
        </member>
        <member name="M:ExtensionSettings.UpdateSelectedValue(System.String,System.String)">
            <summary>
            Updates selected value in the Lists
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:ExtensionSettings.AddValues(System.String[])">
            <summary>
            Add values to parameter value collection
            </summary>
            <param name="values">Values as array of strings</param>
        </member>
        <member name="M:ExtensionSettings.AddValues(System.Collections.Specialized.StringCollection)">
            <summary>
            Add values to parameter value collection
            </summary>
            <param name="values">String collection of values</param>
        </member>
        <member name="M:ExtensionSettings.GetDataTable">
            <summary>
            Parameters with multiple values formatted
            as data table where column names are parameter
            names and collection of values are data rows.
            In the UI bound to the data grid view
            </summary>
            <returns>Data table</returns>
        </member>
        <member name="M:ExtensionSettings.GetSingleValue(System.String)">
            <summary>
            Method to get vaule for scalar parameter
            </summary>
            <param name="parameterName">Parameter Name</param>
            <returns>First value in the values collection</returns>
        </member>
        <member name="M:ExtensionSettings.GetDictionary">
            <summary>
            Dictionary collection of parameters
            </summary>
            <returns>Dictionary object</returns>
        </member>
        <member name="P:ExtensionSettings.Index">
            <summary>
            Defines order for loading into admin settings page
            </summary>
        </member>
        <member name="P:ExtensionSettings.Name">
            <summary>
            Extension name, same as class name
            </summary>
        </member>
        <member name="P:ExtensionSettings.Help">
            <summary>
            Stores information extension author can save to describe 
            settings usage. If set, shows up in the settings page
            </summary>
        </member>
        <member name="P:ExtensionSettings.Delimiter">
            <summary>
            Used to split string into string array, comma by default
            </summary>
        </member>
        <member name="P:ExtensionSettings.Parameters">
            <summary>
            Collection of parameters defined by extension writer.
            </summary>
        </member>
        <member name="P:ExtensionSettings.KeyField">
            <summary>
            Field used as primary key for settings.
            If not defined, first parameter in the collection
            set as key field. Unique and required by default.
            </summary>
        </member>
        <member name="P:ExtensionSettings.RequiredFields">
            <summary>
            Returns collection of required parameters
            </summary>
        </member>
        <member name="P:ExtensionSettings.IsScalar">
            <summary>
            If true, grid view will not show for settings
            and only single text box per parameter will
            be added to the form to update and store input
            </summary>
        </member>
        <member name="P:ExtensionSettings.Hidden">
            <summary>
            If true, settings section will not show in the settings page
            </summary>
        </member>
        <member name="P:ExtensionSettings.ShowAdd">
            <summary>
            If false, "add" button will not show on the settings form
            </summary>
        </member>
        <member name="P:ExtensionSettings.ShowEdit">
            <summary>
            If false, "edit" button will not show in the settings form
            </summary>
        </member>
        <member name="P:ExtensionSettings.ShowDelete">
            <summary>
            If false, "delete" button will not show in the settings form
            </summary>
        </member>
        <member name="T:BlogEngine.Core.SyndicationGenerator">
            <summary>
            Generates syndication feeds for blog entities.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.GENERATOR_NAME">
            <summary>
            Private member to hold the name of the syndication generation utility.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.GENERATOR_URI">
            <summary>
            Private member to hold the URI of the syndication generation utility.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.GENERATOR_VERSION">
            <summary>
            Private member to hold the version of the syndication generation utility.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.blogSettings">
            <summary>
            Private member to hold the <see cref="T:BlogEngine.Core.BlogSettings"/> to use when generating syndication results.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.blogCategories">
            <summary>
            Private member to hold a collection of <see cref="T:BlogEngine.Core.Category"/> objects used to categorize the web log content.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.xmlNamespaces">
            <summary>
            Private member to hold a collection of the XML namespaces that define supported syndication extensions.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.#ctor(BlogEngine.Core.BlogSettings,System.Collections.Generic.List{BlogEngine.Core.Category})">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.SyndicationGenerator"/> class using the supplied <see cref="T:BlogEngine.Core.BlogSettings"/> and collection of <see cref="T:BlogEngine.Core.Category"/> objects.
            </summary>
            <param name="settings">The <see cref="T:BlogEngine.Core.BlogSettings"/> to use when generating syndication results.</param>
            <param name="categories">A collection of <see cref="T:BlogEngine.Core.Category"/> objects used to categorize the web log content.</param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.FormatW3cOffset(System.TimeSpan,System.String)">
            <summary>
            Converts the value of the specified <see cref="T:System.TimeSpan"/> to its equivalent string representation.
            </summary>
            <param name="offset">The <see cref="T:System.TimeSpan"/> to convert.</param>
            <param name="separator">Separator used to deliminate hours and minutes.</param>
            <returns>A string representation of the TimeSpan.</returns>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.GetPermaLink(BlogEngine.Core.IPublishable)">
            <summary>
            Creates a <see cref="T:System.Uri"/> that represents the peramlink for the supplied <see cref="T:BlogEngine.Core.IPublishable"/>.
            </summary>
            <param name="publishable">The <see cref="T:BlogEngine.Core.IPublishable"/> used to generate the permalink for.</param>
            <returns>A <see cref="T:System.Uri"/> that represents the peramlink for the supplied <see cref="T:BlogEngine.Core.IPublishable"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="publishable"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.ToRfc822DateTime(System.DateTime)">
            <summary>
            Converts the supplied <see cref="T:System.DateTime"/> to its equivalent <a href="http://asg.web.cmu.edu/rfc/rfc822.html">RFC-822 DateTime</a> string representation.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to convert.</param>
            <returns>The equivalent <a href="http://asg.web.cmu.edu/rfc/rfc822.html">RFC-822 DateTime</a> string representation.</returns>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.ToW3CDateTime(System.DateTime)">
            <summary>
            Converts the supplied <see cref="T:System.DateTime"/> to its equivalent <a href="http://www.w3.org/TR/NOTE-datetime">W3C DateTime</a> string representation.
            </summary>
            <param name="utcDateTime">The Coordinated Universal Time (UTC) <see cref="T:System.DateTime"/> to convert.</param>
            <returns>The equivalent <a href="http://www.w3.org/TR/NOTE-datetime">W3C DateTime</a> string representation.</returns>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.ConvertPathsToAbsolute(System.String)">
            <summary>
            Converts all relative paths in the spcified content to absolute.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteFeed(BlogEngine.Core.SyndicationFormat,System.IO.Stream,System.Collections.Generic.List{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes a generated syndication feed that conforms to the supplied <see cref="T:BlogEngine.Core.SyndicationFormat"/> using the supplied <see cref="T:System.IO.Stream"/> and collection.
            </summary>
            <param name="format">A <see cref="T:BlogEngine.Core.SyndicationFormat"/> enumeration value indicating the syndication format to generate.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which you want to write the syndication feed.</param>
            <param name="publishables">The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate the syndication feed content.</param>
            <param name="title">The title of the RSS channel</param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteAtomFeed(System.IO.Stream,System.Collections.Generic.List{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes a generated Atom syndication feed to the specified <see cref="T:System.IO.Stream"/> using the supplied collection.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which you want to write the syndication feed.</param>
            <param name="publishables">The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate the syndication feed content.</param>
            <param name="title">The title of the ATOM content.</param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteRssFeed(System.IO.Stream,System.Collections.Generic.List{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes a generated RSS syndication feed to the specified <see cref="T:System.IO.Stream"/> using the supplied collection.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which you want to write the syndication feed.</param>
            <param name="publishables">The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate the syndication feed content.</param>
            <param name="title">The title of the RSS channel.</param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteRssChannel(System.Xml.XmlWriter,System.Collections.Generic.List{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes the RSS channel element information to the specified <see cref="T:System.Xml.XmlWriter"/> using the supplied collection.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write channel element information to.</param>
            <param name="publishables">The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate syndication content.</param>
            <param name="title">The title of the RSS channel.</param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteRssChannelCommonElements(System.Xml.XmlWriter)">
            <summary>
            Writes the common/shared RSS channel element information to the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write channel element information to.</param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteRssItem(System.Xml.XmlWriter,BlogEngine.Core.IPublishable)">
            <summary>
            Writes the RSS channel item element information to the specified <see cref="T:System.Xml.XmlWriter"/> using the supplied <see cref="T:BlogEngine.Core.Page"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write channel item element information to.</param>
            <param name="publishable">The <see cref="T:BlogEngine.Core.IPublishable"/> used to generate channel item content.</param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteAtomContent(System.Xml.XmlWriter,System.Collections.Generic.List{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes the Atom feed element information to the specified <see cref="T:System.Xml.XmlWriter"/> using the supplied collection.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write channel element information to.</param>
            <param name="publishables">The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate syndication content.</param>
            <param name="title">The title of the ATOM content.</param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteAtomContentCommonElements(System.Xml.XmlWriter)">
            <summary>
            Writes the common/shared Atom feed element information to the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write channel element information to.</param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteAtomEntry(System.Xml.XmlWriter,BlogEngine.Core.IPublishable)">
            <summary>
            Writes the Atom feed entry element information to the specified <see cref="T:System.Xml.XmlWriter"/> using the supplied <see cref="T:BlogEngine.Core.Page"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write feed entry element information to.</param>
            <param name="publishable">The <see cref="T:BlogEngine.Core.IPublishable"/> used to generate feed entry content.</param>
        </member>
        <member name="P:BlogEngine.Core.SyndicationGenerator.Categories">
            <summary>
            Gets a collection of <see cref="T:BlogEngine.Core.Category"/> objects used to categorize the web log content.
            </summary>
            <value>A collection of <see cref="T:BlogEngine.Core.Category"/> objects used to categorize the web log content.</value>
        </member>
        <member name="P:BlogEngine.Core.SyndicationGenerator.SupportedNamespaces">
            <summary>
            Gets a collection of the XML namespaces used to provide support for syndication extensions.
            </summary>
            <value>The collection of the XML namespaces, keyed by namespace prefix, that are used to provide support for syndication extensions.</value>
        </member>
        <member name="P:BlogEngine.Core.SyndicationGenerator.Settings">
            <summary>
            Gets or sets the <see cref="T:BlogEngine.Core.BlogSettings"/> used when generating syndication results.
            </summary>
            <value>The <see cref="T:BlogEngine.Core.BlogSettings"/> used when generating syndication results.</value>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.PingbackHandler">
            <summary>
            Recieves pingbacks from other blogs and websites, and 
            registers them as a comment.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
            implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> 
            object that provides references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.AddComment(System.String,BlogEngine.Core.Post)">
            <summary>
            Insert the pingback as a comment on the post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.ParseRequest(System.Web.HttpContext)">
            <summary>
            Retrieves the content of the input stream
            and return it as plain text.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.GetDomain(System.String)">
            <summary>
            Parse the source URL to get the domain.
            It is used to fill the Author property of the comment.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.IsFirstPingBack(BlogEngine.Core.Post,System.String)">
            <summary>
            Checks to see if the source has already pinged the target.
            If it has, there is no reason to add it again.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.ExamineSourcePage(System.String,System.String)">
            <summary>
            Parse the HTML of the source page.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.GetPostByUrl(System.String)">
            <summary>
            Retrieve the post that belongs to the target URL.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.OnReceived(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.OnAccepted(System.String)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.OnRejected(System.String)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.OnSpammed(System.String)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Received">
            <summary>
            Occurs when a hit is made to the trackback.axd handler.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Accepted">
            <summary>
            Occurs when a pingback is accepted as valid and added as a comment.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Rejected">
            <summary>
            Occurs when a pingback request is rejected because the sending
            website already made a trackback or pingback to the specific page.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Spammed">
            <summary>
            Occurs when the request comes from a spammer.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.ImageHandler">
            <summary>
            The ImageHanlder serves all images that is uploaded from
            the admin pages. 
            </summary>
            <remarks>
            By using a HttpHandler to serve images, it is very easy
            to add the capability to stop bandwidth leeching or
            to create a statistics analysis feature upon it.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.ImageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
            implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object 
            that provides references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.ImageHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.ImageHandler.Serving">
            <summary>
            Occurs before the requested image is served.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.ImageHandler.Served">
            <summary>
            Occurs when a file is served.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.ImageHandler.BadRequest">
            <summary>
            Occurs when the requested file does not exist.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.CssHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.CssHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom 
            HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides 
            references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.CssHandler.StripWhitespace(System.String)">
            <summary>
            Strips the whitespace from any .css file.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.CssHandler.SetHeaders(System.Int32,System.Web.HttpContext)">
            <summary>
            This will make the browser and server keep the output
            in its cache and thereby improve performance.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.CssHandler.RetrieveLocalCss(System.String)">
            <summary>
            Retrieves the local CSS from the disk
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.CssHandler.RetrieveRemoteCss(System.String)">
            <summary>
            Retrieves the specified remote CSS using a WebClient.
            </summary>
            <param name="file">The remote URL</param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.CssHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.CssHandler.Serving">
            <summary>
            Occurs when the requested file does not exist;
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.CssHandler.Served">
            <summary>
            Occurs when a file is served;
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.CssHandler.BadRequest">
            <summary>
            Occurs when the requested file does not exist;
            </summary>
        </member>
        <member name="T:BlogEngine.Core.ICustomFilter">
            <summary>
            An interface implemented by anti-spam 
            services like Waegis, Akismet etc.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.ICustomFilter.Initialize">
            <summary>
            Initializes anti-spam service
            </summary>
            <returns>True if service online and credentials validated</returns>
        </member>
        <member name="M:BlogEngine.Core.ICustomFilter.Check(BlogEngine.Core.Comment)">
            <summary>
            Check if comment is spam
            </summary>
            <param name="comment">BlogEngine comment</param>
            <returns>True if comment is spam</returns>
        </member>
        <member name="M:BlogEngine.Core.ICustomFilter.Report(BlogEngine.Core.Comment)">
            <summary>
            Report mistakes back to service
            </summary>
            <param name="comment">BlogEngine comment</param>
        </member>
        <member name="P:BlogEngine.Core.ICustomFilter.FallThrough">
            <summary>
            Determins if comment should be passed to
            the next custom filter
            </summary>
            <returns>True if next filter should run</returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogService">
            <summary>
            The proxy class for communication between
            the business objects and the providers.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadProviders">
            <summary>
            Load the providers from the web.config.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectPost(System.Guid)">
            <summary>
            Returns a Post based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertPost(BlogEngine.Core.Post)">
            <summary>
            Persists a new Post in the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdatePost(BlogEngine.Core.Post)">
            <summary>
            Updates an exsiting Post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeletePost(BlogEngine.Core.Post)">
            <summary>
            Deletes the specified Post from the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillPosts">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectPage(System.Guid)">
            <summary>
            Returns a Page based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertPage(BlogEngine.Core.Page)">
            <summary>
            Persists a new Page in the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdatePage(BlogEngine.Core.Page)">
            <summary>
            Updates an exsiting Page.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeletePage(BlogEngine.Core.Page)">
            <summary>
            Deletes the specified Page from the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillPages">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectProfile(System.String)">
            <summary>
            Returns a Page based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Persists a new Page in the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdateProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Updates an exsiting Page.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Deletes the specified Page from the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillProfiles">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectCategory(System.Guid)">
            <summary>
            Returns a Category based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertCategory(BlogEngine.Core.Category)">
            <summary>
            Persists a new Category in the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdateCategory(BlogEngine.Core.Category)">
            <summary>
            Updates an exsiting Category.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteCategory(BlogEngine.Core.Category)">
            <summary>
            Deletes the specified Category from the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillCategories">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadSettings">
            <summary>
            Loads the settings from the provider and returns
            them in a StringDictionary for the BlogSettings class to use.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SaveSettings(System.Collections.Specialized.StringDictionary)">
            <summary>
            Save the settings to the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadPingServices">
            <summary>
            Loads the ping services.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SavePingServices(System.Collections.Specialized.StringCollection)">
            <summary>
            Saves the ping services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadStopWords">
            <summary>
            Loads the stop words from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Loads settings from data storage
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension ID</param>
            <returns>Settings as stream</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SaveToDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves settings to data store
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extensio ID</param>
            <param name="settings">Settings object</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.RemoveFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Removes object from data store
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension Id</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.GetStorageLocation">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectBlogRoll(System.Guid)">
            <summary>
            Returns a BlogRoll based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertBlogRoll(BlogEngine.Core.BlogRollItem)">
            <summary>
            Persists a new BlogRoll in the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdateBlogRoll(BlogEngine.Core.BlogRollItem)">
            <summary>
            Updates an exsiting BlogRoll.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteBlogRoll(BlogEngine.Core.BlogRollItem)">
            <summary>
            Deletes the specified BlogRoll from the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillBlogRolls">
            <summary>
            Returns a list of all BlogRolls in the current provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectReferrer(System.Guid)">
            <summary>
            Returns a Referrer based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Persists a new Referrer in the current provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdateReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Updates an existing Referrer.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillReferrers">
            <summary>
            Returns a list of all Referrers in the current provider.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogService.Provider">
            <summary>
            Gets the current provider.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogService.Providers">
            <summary>
            Gets a collection of all registered providers.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.ExtensionAttribute">
            <summary>
            All extensions must decorate the class with this attribute.
            It is used for reflection.
            <remarks>
            When using this attribute, you must make sure
            to have a default constructor. It will be used to create
            an instance of the extension through reflection.
            </remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.ExtensionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute and assigns a description.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.ExtensionAttribute.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates an instance of the attribute and assigns a description.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.ExtensionAttribute.Description">
            <summary>
            Gets the description of the extension.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.ExtensionAttribute.Version">
            <summary>
            Gets the version number of the extension
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.ExtensionAttribute.Author">
            <summary>
            Gets the author of the extension
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.ExtensionAttribute.Priority">
            <summary>
            Gets the priority of the extension
            This determins in what order extensions instantiated
            and in what order they will respond to events
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.SortedExtension">
            <summary>
            Helper class for sorting extensions by priority
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.SortedExtension.Priority">
            <summary>
            Order in which extensions are sorted and respond to events
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.SortedExtension.Name">
            <summary>
            Name of the extension
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.SortedExtension.Type">
            <summary>
            Type of the extension
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.SortedExtension.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="p">Priority</param>
            <param name="n">Name</param>
            <param name="t">Type</param>
        </member>
        <member name="T:BlogEngine.Core.BusinessBase`2">
            <summary>
            This is the base class from which most business objects will be derived. 
            To create a business object, inherit from this class.
            </summary>
            <typeparam name="TYPE">The type of the derived class.</typeparam>
            <typeparam name="KEY">The type of the Id property.</typeparam>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Delete">
            <summary>
            Marks the object for deletion. It will then be 
            deleted when the object's Save() method is called.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.MarkChanged(System.String)">
            <summary>
            Marks an object as being dirty, or changed.
            </summary>
            <param name="propertyName">The name of the property to mark dirty.</param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.MarkOld">
            <summary>
            Marks the object as being an clean, 
            which means not dirty.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.AddRule(System.String,System.String,System.Boolean)">
            <summary>
            Add or remove a broken rule.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="errorMessage">The description of the error</param>
            <param name="isBroken">True if the validation rule is broken.</param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.ValidationRules">
            <summary>
            Reinforces the business rules by adding additional rules to the 
            broken rules collection.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Load(`1)">
            <summary>
            Loads an instance of the object based on the Id.
            </summary>
            <param name="id">The unique identifier of the object</param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Save">
            <summary>
            Saves the object to the data store (inserts, updates or deletes).
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Save(System.String,System.String)">
            <summary>
            Saves the object to the data store (inserts, updates or deletes).
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Update">
            <summary>
            Is called by the save method when the object is old and dirty.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.DataSelect(`1)">
            <summary>
            Retrieves the object from the data store and populates it.
            </summary>
            <param name="id">The unique identifier of the object.</param>
            <returns>True if the object exists and is being populated successfully</returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.DataInsert">
            <summary>
            Inserts a new object to the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.DataDelete">
            <summary>
            Deletes the object from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.GetHashCode">
            <summary>
            A uniquely key to identify this particullar instance of the class
            </summary>
            <returns>A unique integer value</returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Equals(System.Object)">
            <summary>
            Comapares this object with another
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the two objects as equal</returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.op_Equality(BlogEngine.Core.BusinessBase{`0,`1},BlogEngine.Core.BusinessBase{`0,`1})">
            <summary>
            Checks to see if two business objects are the same.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.op_Inequality(BlogEngine.Core.BusinessBase{`0,`1},BlogEngine.Core.BusinessBase{`0,`1})">
            <summary>
            Checks to see if two business objects are different.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.OnSaved(BlogEngine.Core.BusinessBase{`0,`1},BlogEngine.Core.SaveAction)">
            <summary>
            Raises the Saved event.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.OnSaving(BlogEngine.Core.BusinessBase{`0,`1},BlogEngine.Core.SaveAction)">
            <summary>
            Raises the Saving event
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event safely.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees ressources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Dispose">
            <summary>
            Disposes the object and frees ressources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.System#ComponentModel#IChangeTracking#AcceptChanges">
            <summary>
            Resets the object�s state to unchanged by accepting the modifications.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Id">
            <summary>
            Gets the unique Identification of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.DateCreated">
            <summary>
            The date on which the instance was created.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.DateModified">
            <summary>
            The date on which the instance was modified.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.IsAuthenticated">
            <summary>
            Gets a value indicating whether the current user is authenticated.
            </summary>
            <value>
            	<c>true</c> if this instance is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.IsNew">
            <summary>
            Gets if this is a new object, False if it is a pre-existing object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.IsDeleted">
            <summary>
            Gets if this object is marked for deletion.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.IsChanged">
            <summary>
            Gets if this object's data has been changed.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.ChangedProperties">
            <summary>
            A collection of the properties that have 
            been marked as being dirty.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.IsValid">
            <summary>
            Gets whether the object is valid or not.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.ValidationMessage">
            /// <summary>
            If the object has broken business rules, use this property to get access
            to the different validation messages.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.BusinessBase`2.Saved">
            <summary>
            Occurs when the class is Saved
            </summary>
        </member>
        <member name="E:BlogEngine.Core.BusinessBase`2.Saving">
            <summary>
            Occurs when the class is Saved
            </summary>
        </member>
        <member name="E:BlogEngine.Core.BusinessBase`2.PropertyChanged">
            <summary>
            Occurs when this instance is marked dirty. 
            It means the instance has been changed but not saved.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.IsDisposed">
            <summary>
            Gets or sets if the object has been disposed.
            <remarks>
            If the objects is disposed, it must not be disposed a second
            time. The IsDisposed property is set the first time the object
            is disposed. If the IsDisposed property is true, then the Dispose()
            method will not dispose again. This help not to prolong the object's
            life if the Garbage Collector.
            </remarks>
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified column name.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.Profiles">
            <summary>
            Gets an unsorted list of all pages.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Role">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Role.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Role"/> class.
            </summary>
            <param name="name">A name.</param>
        </member>
        <member name="M:BlogEngine.Core.Role.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Role"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Role.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Role"/> class.
            </summary>
            <param name="name">A name.</param>
            <param name="userNames">A list of users in role.</param>
        </member>
        <member name="P:BlogEngine.Core.Role.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:BlogEngine.Core.Role.Users">
            <summary>
            Gets the users.
            </summary>
            <value>The users.</value>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpModules.CompressionModule">
            <summary>
            Compresses the output using standard gzip/deflate.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.System#Web#IHttpModule#Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module 
            that implements <see cref="T:System.Web.IHttpModule"></see>.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"></see> 
            that provides access to the methods, properties, and events common to 
            all application objects within an ASP.NET application.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.context_PostReleaseRequestState(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.CompressResponse(System.Web.HttpContext)">
            <summary>
            Compresses the response stream using either deflate or gzip depending on the client.
            </summary>
            <param name="context">The HTTP context to compress.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.IsEncodingAccepted(System.String)">
            <summary>
            Checks the request headers to see if the specified
            encoding is accepted by the client.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.SetEncoding(System.String)">
            <summary>
            Adds the specified encoding to the response headers.
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.WebResourceFilter.Evaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Evaluates the replacement for each link match.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Category">
            <summary>
            Categories are a way to organize posts. 
            A post can be in multiple categories.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Category"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="description"></param>
        </member>
        <member name="M:BlogEngine.Core.Category.CompleteTitle">
            <summary>
            Gets the full title with Parent names included
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.GetCategory(System.Guid)">
            <summary>
            Returns a category based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.ValidationRules">
            <summary>
            Reinforces the business rules by adding additional rules to the
            broken rules collection.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.DataSelect(System.Guid)">
            <summary>
            Retrieves the object from the data store and populates it.
            </summary>
            <param name="id">The unique identifier of the object.</param>
            <returns>
            True if the object exists and is being populated successfully
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Category.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.DataInsert">
            <summary>
            Inserts a new object to the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.DataDelete">
            <summary>
            Deletes the object from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Category.CompareTo(BlogEngine.Core.Category)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has the following meanings: Value Meaning Less than zero This object is 
            less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Category.Title">
            <summary>
            Gets or sets the Title or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.Description">
            <summary>
            Gets or sets the Description of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.Posts">
            <summary>
            Get all posts in this category.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.Parent">
            <summary>
            Gets or sets the Parent ID of the object
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.RelativeLink">
            <summary>
            Gets the relative link to the page displaying all posts for this category.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.AbsoluteLink">
            <summary>
            Gets the absolute link to the page displaying all posts for this category.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.FeedRelativeLink">
            <summary>
            Gets the relative link to the feed for this category's posts.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.FeedAbsoluteLink">
            <summary>
            Gets the absolute link to the feed for this category's posts.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.Categories">
            <summary>
            Gets an unsorted list of all Categories.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Referrer">
            <summary>
            Referrers are web sites that users followed to get to your blog.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Referrer"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Referrer"/> class.
            </summary>
            <param name="Referrer">The ReferrerUrl for the Referrer.</param>
        </member>
        <member name="M:BlogEngine.Core.Referrer.ValidationRules">
            <summary>
            Reinforces the business rules by adding additional rules to the
            broken rules collection.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.DataSelect(System.Guid)">
            <summary>
            Retrieves the object from the data store and populates it.
            </summary>
            <param name="id">The unique identifier of the object.</param>
            <returns>
            The object that was selected from the data store.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Referrer.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.DataInsert">
            <summary>
            Inserts a new object to the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.DataDelete">
            <summary>
            Deletes the object from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Referrer.CompareTo(BlogEngine.Core.Referrer)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has the following meanings: Value Meaning Less than zero This object is 
            less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Referrer.ReferrerUrl">
            <summary>
            Gets or sets the referrer address of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.Url">
            <summary>
            Gets or sets the referrer Url of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.Count">
            <summary>
            Gets or sets the Count of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.Day">
            <summary>
            Gets or sets the Day of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.PossibleSpam">
            <summary>
            Gets or sets the PossibleSpam of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.Referrers">
            <summary>
            Gets all of the Referrers from the data store.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.ReferrersByDay">
            <summary>
            An automatically maintained Dictionary of Referrers separated by Day.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.DataStore.SerializableStringDictionary">
            <summary>
            Serializable String Dictionary
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SerializableStringDictionary.GetSchema">
            <summary>
            Get Schema
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SerializableStringDictionary.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates a collection from its XML representation.
            </summary>
            <param name="reader">System.Xml.XmlReader</param>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SerializableStringDictionary.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Loads collection to XML writer
            </summary>
            <param name="writer">System.Xml.XmlWriter</param>
        </member>
        <member name="T:BlogEngine.Core.DataStore.ExtensionSettingsBehavior">
            <summary>
            Incapsulates behavior for saving and retreaving
            extension settings
            </summary>
        </member>
        <member name="T:BlogEngine.Core.DataStore.ISettingsBehavior">
            <summary>
            Public interfaces and enums for DataStore
            ISettingsBehavior incapsulates saving and retreaving
            settings objects to and from data storage
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ISettingsBehavior.SaveSettings(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Save settings interface
            </summary>
            <param name="exType">Extensio Type</param>
            <param name="exId">Extensio Id</param>
            <param name="settings">Settings object</param>
            <returns>True if saved</returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ISettingsBehavior.GetSettings(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Get settings interface
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension Id</param>
            <returns>Settings object</returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ExtensionSettingsBehavior.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ExtensionSettingsBehavior.SaveSettings(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves extension to database or file system
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension ID</param>
            <param name="settings">Extension object</param>
            <returns>True if saved</returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ExtensionSettingsBehavior.GetSettings(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Retreaves extension object from database or file system
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension ID</param>
            <returns>Extension object as Stream</returns>
        </member>
        <member name="T:BlogEngine.Core.SavedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogEngine.Core.SavedEventArgs.#ctor(BlogEngine.Core.SaveAction)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.SavedEventArgs"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:BlogEngine.Core.SavedEventArgs.Action">
            <summary>
            Gets or sets the action that occured when the object was saved.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.SaveAction">
            <summary>
            The action performed by the save event.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SaveAction.None">
            <summary>
            Default. Nothing happened.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SaveAction.Insert">
            <summary>
            It's a new object that has been inserted.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SaveAction.Update">
            <summary>
            It's an old object that has been updated.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SaveAction.Delete">
            <summary>
            The object was deleted.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.ServingEventArgs">
            <summary>
            Used when a post is served to the output stream.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.ServingEventArgs.#ctor(System.String,BlogEngine.Core.ServingLocation)">
            <summary>
            Creates a new instance of the class and applies the specified body and serving location.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.ServingEventArgs.#ctor(System.String,BlogEngine.Core.ServingLocation,BlogEngine.Core.ServingContentBy)">
            <summary>
            Creates a new instance of the class and applies the specified body, serving location and serving content by.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.ServingEventArgs.Body">
            <summary>
            Gets or sets the body of the post. If you change the Body, 
            then that change will be shown on the web page.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.ServingEventArgs.ContentBy">
            <summary>
            The criteria by which the content is being served (by tag, category, author, etc).
            </summary>
        </member>
        <member name="P:BlogEngine.Core.ServingEventArgs.Location">
            <summary>
            The location where the serving takes place.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.ServingEventArgs.Cancel">
            <summary>
            Cancels the serving of the content.
            <remarks>If the serving is cancelled then the item will not be displayed.</remarks>
            </summary>
        </member>
        <member name="T:BlogEngine.Core.ServingLocation">
            <summary>
            The location where the serving takes place
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.None">
            <summary>Is used to indicate that a location hasn't been chosen.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.SinglePost">
            <summary>Is used when a single post is served from post.aspx.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.PostList">
            <summary>Is used when multiple posts are served using postlist.ascx.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.SinglePage">
            <summary>Is used when a single page is displayed on page.aspx.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.Feed">
            <summary>Is used when content is served from a feed (RSS or ATOM).</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.Email">
            <summary>Is used when content is being sent by e-mail.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.Other">
            <summary>Is used when content is served on a custom location.</summary>
        </member>
        <member name="T:BlogEngine.Core.ServingContentBy">
            <summary>
            The criteria by which the content is being served (by tag, category, author, etc)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Unspecified">
            <summary>The criteria by which content is being served is unspecified.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.AllContent">
            <summary>All content is being served.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Tag">
            <summary>Content is being served by tag.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Category">
            <summary>Content is being served by category.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Author">
            <summary>Content is being served by author.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.DateRange">
            <summary>Content is being served by date range.</summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Apml">
            <summary>Content is being served by APML filtering.</summary>
        </member>
        <member name="T:BlogEngine.Core.Ping.Trackback">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Trackback.Send(BlogEngine.Core.Ping.TrackbackMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>    
        </member>
        <member name="E:BlogEngine.Core.Ping.Trackback.Sending">
            <summary>
            Occurs just before a trackback is sent.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Ping.Trackback.Sent">
            <summary>
            Occurs when a trackback has been sent
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Ping.TrackbackMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.TrackbackMessage.#ctor(BlogEngine.Core.IPublishable,System.Uri,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Ping.TrackbackMessage"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="urlToNotifyTrackback">The URL to notify trackback.</param>
        </member>
        <member name="M:BlogEngine.Core.Ping.TrackbackMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.PostUrl">
            <summary>
            Gets or sets the post URL.
            </summary>
            <value>The post URL.</value>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.Excerpt">
            <summary>
            Gets or sets the excerpt.
            </summary>
            <value>The excerpt.</value>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.BlogName">
            <summary>
            Gets or sets the name of the blog.
            </summary>
            <value>The name of the blog.</value>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.UrlToNotifyTrackback">
            <summary>
            Gets or sets the URL to notify trackback.
            </summary>
            <value>The URL to notify trackback.</value>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse">
            <summary>
            Object is the outgoing XML-RPC response.  This objects properties are set
            and the Response method is called sending the response via the HttpContext Response.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.#ctor(System.String)">
            <summary>
            Constructor sets default value
            </summary>
            <param name="methodName">MethodName of called XML-RPC method</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Response(System.Web.HttpContext)">
            <summary>
            Response generates the XML-RPC response and returns it to the caller.
            </summary>
            <param name="context">httpContext.Response.OutputStream is used from the context</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteFault(System.Xml.XmlTextWriter)">
            <summary>
            Writes Fault Parameters of Response.
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteBool(System.Xml.XmlTextWriter)">
            <summary>
            Writes Boolean parameter of Response
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteGetCategories(System.Xml.XmlTextWriter)">
            <summary>
            Writes the Array of Category structs parameters of Response
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteKeywords(System.Xml.XmlTextWriter)">
            <summary>
            Writes the Array of Keyword structs parameters of Response
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteMediaInfo(System.Xml.XmlTextWriter)">
            <summary>
            Writes the MediaInfo Struct of Response
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteNewPost(System.Xml.XmlTextWriter)">
            <summary>
            Writes the PostID string of Response.
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteNewPage(System.Xml.XmlTextWriter)">
            <summary>
            Writes the PageID string of Response.
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WritePost(System.Xml.XmlTextWriter)">
            <summary>
            Writes the Metaweblog Post Struct of Response.
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WritePage(System.Xml.XmlTextWriter)">
            <summary>
            Writes the Metaweblog Post Struct of Response.
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WritePosts(System.Xml.XmlTextWriter)">
            <summary>
            Writes the array of Metaweblog Post Structs of Response.
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteGetUsersBlogs(System.Xml.XmlTextWriter)">
            <summary>
            Writes array of BlogInfo structs of Response
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.ConvertDatetoISO8601(System.DateTime)">
            <summary>
            Convert Date to format expected by MetaWeblog Response.
            </summary>
            <param name="date">DateTime to convert</param>
            <returns>ISO8601 date string</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteAuthors(System.Xml.XmlTextWriter)">
            <summary>
            Writes the Array of Category structs parameters of Response
            </summary>
            <param name="data">xml response</param>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Authors">
            <summary>
            List if author structs.  Used by wp.getAuthors.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Blogs">
            <summary>
            List of blog structs.  Used by blogger.getUsersBlogs.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Categories">
            <summary>
            List of category structs. Used by metaWeblog.getCategories.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Keywords">
            <summary>
            List of Tags.  Used by wp.getTags.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Completed">
            <summary>
            Marks whether function call was completed and successful.  
            Used by metaWeblog.editPost and blogger.deletePost.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Fault">
            <summary>
            Fault Struct. Used by API to return error information
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.MediaInfo">
            <summary>
            MediaInfo Struct
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Post">
            <summary>
            Metaweblog Post Struct. Used by metaWeblog.getPost
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.PostID">
            <summary>
            Id of post that was just added.  Used by metaWeblog.newPost
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.PageID">
            <summary>
            Id of page that was just added.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Posts">
            <summary>
            List of Metaweblog Post Structs.  Used by metaWeblog.getRecentPosts
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Pages">
            <summary>
            List of Page Structs
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Page">
            <summary>
            MWAPage struct
            </summary>
        </member>
        <member name="T:ExtensionManager">
            <summary>
            Extension Manager - top level object in the hierarchy
            Holds collection of extensions and methods to manipulate
            extensions
            </summary>
        </member>
        <member name="M:ExtensionManager.#ctor">
            <summary>
            Default constructor, requred for serialization to work
            </summary>
        </member>
        <member name="F:ExtensionManager.FileAccessException">
            <summary>
            Used to hold exeption thrown when extension can not be serialized because of
            file access permission. Not serializable, used by UI to show error message.
            </summary>
        </member>
        <member name="M:ExtensionManager.ExtensionEnabled(System.String)">
            <summary>
            Enabled / Disabled
            </summary>
            <param name="extensionName"></param>
            <returns>True if enabled</returns>
        </member>
        <member name="M:ExtensionManager.SetStatus(System.String,System.Boolean)">
            <summary>
            Only change status on first load;
            This allows to enable/disable extension on
            initial load and then be able to override it with
            change status from admin interface
            </summary>
            <param name="extension">Extension Name</param>
            <param name="enabled">Enable/disable extension on initial load</param>
        </member>
        <member name="M:ExtensionManager.ChangeStatus(System.String,System.Boolean)">
            <summary>
            Method to change extension status
            </summary>
            <param name="extension">Extensio Name</param>
            <param name="enabled">If true, enables extension</param>
        </member>
        <member name="M:ExtensionManager.SetAdminPage(System.String,System.String)">
            <summary>
            A way to let extension author to use custom
            admin page. Will show up as link on extensions page
            </summary>
            <param name="extension">Extension Name</param>
            <param name="url">Path to custom admin page</param>
        </member>
        <member name="M:ExtensionManager.Contains(System.Type)">
            <summary>
            Tell if manager already has this extension
            </summary>
            <param name="type">Extension Type</param>
            <returns>True if already has</returns>
        </member>
        <member name="M:ExtensionManager.ShowSettings(System.String,System.Boolean)">
            <summary>
            Show of hide settings in the admin/extensions list
            </summary>
            <param name="extensionName">Extension name</param>
            <param name="flag">True of false</param>
        </member>
        <member name="M:ExtensionManager.GetExtension(System.String)">
            <summary>
            Returns extension to the client based on name
            </summary>
            <param name="extensionName">Extension name</param>
            <returns>Extension object or null</returns>
        </member>
        <member name="M:ExtensionManager.LoadExtensions">
            <summary>
            If extensions not in the cache will load
            from the XML file. If file not exists
            will load from assembly using reflection
            </summary>
        </member>
        <member name="M:ExtensionManager.DataStoreExtension(System.String)">
            <summary>
            Returns extension object
            </summary>
            <param name="name">Extension name</param>
            <returns>Extension</returns>
        </member>
        <member name="M:ExtensionManager.GetSettings(System.String)">
            <summary>
            Method to get settings collection
            </summary>
            <param name="extensionName">Extension Name</param>
            <returns>Collection of settings</returns>
        </member>
        <member name="M:ExtensionManager.GetSettings(System.String,System.String)">
            <summary>
            Returns settings for specified extension
            </summary>
            <param name="extensionName">Extension Name</param>
            <param name="settingName">Settings Name</param>
            <returns>Settings object</returns>
        </member>
        <member name="M:ExtensionManager.SaveSettings(ExtensionSettings)">
            <summary>
            Will save settings (add to extension object, then
            cache and serialize all object hierarhy to XML)
            </summary>
            <param name="settings">Settings object</param>
        </member>
        <member name="M:ExtensionManager.ImportSettings(ExtensionSettings)">
            <summary>
            Do initial import here.
            If already imported, let extension manager take care of settings
            To reset, blogger has to delete all settings in the manager
            </summary>
        </member>
        <member name="M:ExtensionManager.InitSettings(System.String,ExtensionSettings)">
            <summary>
            Initializes settings by importing default parameters
            </summary>
            <param name="extensionName">Extension Name</param>
            <param name="settings">Settings object</param>
            <returns>Settings object</returns>
        </member>
        <member name="M:ExtensionManager.Save">
            <summary>
            Will serialize and cache ext. mgr. object
            </summary>
        </member>
        <member name="M:ExtensionManager.SaveToCache">
            <summary>
            Caches for performance. If manager cached
            and not updates done, chached copy always 
            returned
            </summary>
        </member>
        <member name="M:ExtensionManager.SaveToStorage">
            <summary>
            Saves ext. manager object to XML file
            or database table using provider model
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ExtensionManager.SaveToStorage(ManagedExtension)">
            <summary>
            Save individual extension to storage
            </summary>
            <param name="ext">Extension</param>
            <returns>True if saved</returns>
        </member>
        <member name="M:ExtensionManager.IsNewExtension(System.String)">
            <summary>
            Extension is "new" if it is loaded from assembly
            but not yet saved to the disk. This state is needed
            so that we can initialize extension and its settings
            on the first load and then override it from admin
            </summary>
            <param name="name">Extension name</param>
            <returns>True if new</returns>
        </member>
        <member name="P:ExtensionManager.Extensions">
            <summary>
            Collection of extensions
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.DbRoleProvider">
            <summary>
            Generic Db Role Provider
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider
            </summary>
            <param name="name">Configuration name</param>
            <param name="config">Configuration settings</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Check to see if user is in a role
            </summary>
            <param name="username"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Return an array of roles that user is in
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.CreateRole(System.String)">
            <summary>
            Adds a new role to the database
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Removes a role from database
            </summary>
            <param name="roleName"></param>
            <param name="throwOnPopulatedRole"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.RoleExists(System.String)">
            <summary>
            Checks to see if role exists
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds all users in user array to all roles in role array
            </summary>
            <param name="usernames"></param>
            <param name="roleNames"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes all users in user array from all roles in role array
            </summary>
            <param name="usernames"></param>
            <param name="roleNames"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Returns array of users in selected role
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.GetAllRoles">
            <summary>
            Returns array of all roles in database
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Returns all users in selected role with names that match usernameToMatch
            </summary>
            <param name="roleName"></param>
            <param name="usernameToMatch"></param>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbRoleProvider.ApplicationName">
            <summary>
            Returns the application name as set in the web.config
            otherwise returns BlogEngine.  Set will throw an error.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.DataStore.SettingsBase">
            <summary>
            Base class for extension settings
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SettingsBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SettingsBase.SaveSettings(System.Object)">
            <summary>
            Saves setting object to data storage
            </summary>
            <param name="settings">Settings</param>
            <returns>True if saved</returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SettingsBase.GetSettings">
            <summary>
            Get settings object from data storage
            </summary>
            <returns>Stream representing extension object</returns>
        </member>
        <member name="P:BlogEngine.Core.DataStore.SettingsBase.SettingsBehavior">
            <summary>
            Settings behavior
            </summary>
        </member>
        <member name="P:BlogEngine.Core.DataStore.SettingsBase.ExType">
            <summary>
            Type of extension (extension, widget or theme)
            </summary>
        </member>
        <member name="P:BlogEngine.Core.DataStore.SettingsBase.SettingID">
            <summary>
            Setting ID
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.PageSiteMap">
            <summary>
            A site map provider for the Pages in BlogEngine.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PageSiteMap.FindSiteMapNode(System.String)">
            <summary>
            When overridden in a derived class, retrieves a <see cref="T:System.Web.SiteMapNode"></see> object that represents the page at the specified URL.
            </summary>
            <param name="rawUrl">A URL that identifies the page for which to retrieve a <see cref="T:System.Web.SiteMapNode"></see>.</param>
            <returns>
            A <see cref="T:System.Web.SiteMapNode"></see> that represents the page identified by rawURL; otherwise, null, if no corresponding <see cref="T:System.Web.SiteMapNode"></see> is found or if security trimming is enabled and the <see cref="T:System.Web.SiteMapNode"></see> cannot be returned for the current user.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PageSiteMap.GetChildNodes(System.Web.SiteMapNode)">
            <summary>
            When overridden in a derived class, retrieves the child nodes of a specific <see cref="T:System.Web.SiteMapNode"></see>.
            </summary>
            <param name="node">The <see cref="T:System.Web.SiteMapNode"></see> for which to retrieve all child nodes.</param>
            <returns>
            A read-only <see cref="T:System.Web.SiteMapNodeCollection"></see> that contains the immediate child nodes of the specified <see cref="T:System.Web.SiteMapNode"></see>; otherwise, null or an empty collection, if no child nodes exist.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PageSiteMap.GetParentNode(System.Web.SiteMapNode)">
            <summary>
            When overridden in a derived class, retrieves the parent node of a specific <see cref="T:System.Web.SiteMapNode"></see> object.
            </summary>
            <param name="node">The <see cref="T:System.Web.SiteMapNode"></see> for which to retrieve the parent node.</param>
            <returns>
            A <see cref="T:System.Web.SiteMapNode"></see> that represents the parent of node; otherwise, null, if the <see cref="T:System.Web.SiteMapNode"></see> has no parent or security trimming is enabled and the parent node is not accessible to the current user.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PageSiteMap.GetRootNodeCore">
            <summary>
            When overidden in a derived class, retrieves the root node of all the nodes that are currently managed by the current provider.
            </summary>
            <returns>
            A <see cref="T:System.Web.SiteMapNode"></see> that represents the root node of the set of nodes that the current provider manages.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.CommentViewBase">
            <summary>
            Inherit from this class when you are building the
            commentview.ascx user control in your custom theme.
            </summary>
            <remarks>
            The class exposes a lot of functionality to the custom
            comment control in the theme folder.
            </remarks>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.CommentViewBase.regex">
            <summary>
            The regular expression used to parse links.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.CommentViewBase.ResolveLinks(System.String)">
            <summary>
            Examins the comment body for any links and turns them
            automatically into one that can be clicked.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.CommentViewBase.Gravatar(System.Int32)">
            <summary>
            Displays the Gravatar image that matches the specified email.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.Post">
            <summary>
            Gets or sets the Post from which the comment belongs.
            </summary>
            <value>The Post object.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.Comment">
            <summary>
            Gets or sets the Comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.Text">
            <summary>
            Gets the text of the comment.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.ReplyToLink">
            <summary>
            Displays a link that lets a user reply to a specific comment
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.AdminLinks">
            <summary>
            Displays a delete link to visitors that are authenticated
            using the default membership provider.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.Flag">
            <summary>
            Displays the flag of the country from which the comment was written.
            <remarks>
            If the country hasn't been resolved from the authors IP address or
            the flag does not exist for that country, nothing is displayed.
            </remarks>
            </summary>
        </member>
        <member name="T:BlogEngine.Core.SyndicationFormat">
            <summary>
            Represents common types of syndication formats.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationFormat.None">
            <summary>
            No syndication format specified.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationFormat.Atom">
            <summary>
             Indicates that a feed conforms to the Atom syndication format.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationFormat.Rss">
            <summary>
            Indicates that a feed conforms to the RSS syndication format.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.Sioc">
            <summary>
            Based on John Dyer's (http://johndyer.name/) extension.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Sioc.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:ParameterType">
            <summary>
            Enumeration for parameter data types
            </summary>
        </member>
        <member name="T:ExtensionParameter">
            <summary>
            Extension Parameter - serializable object
            that holds parameter attributes and collection
            of values
            </summary>
        </member>
        <member name="M:ExtensionParameter.#ctor">
            <summary>
            Default constructor required for serialization
            </summary>
        </member>
        <member name="M:ExtensionParameter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Parameter Name</param>
        </member>
        <member name="M:ExtensionParameter.AddValue(System.String)">
            <summary>
            Add single value to value collection
            </summary>
            <param name="val">Value</param>
        </member>
        <member name="M:ExtensionParameter.AddValue(System.Object)">
            <summary>
            Add single value to collection
            </summary>
            <param name="val">Value object</param>
        </member>
        <member name="M:ExtensionParameter.UpdateScalarValue(System.String)">
            <summary>
            Update value for scalar (single value) parameter
            </summary>
            <param name="val">Value</param>
        </member>
        <member name="M:ExtensionParameter.UpdateScalarValue(System.Object)">
            <summary>
            Update value for scalar (single value) parameter
            </summary>
            <param name="val">Value</param>
        </member>
        <member name="M:ExtensionParameter.DeleteValue(System.Int32)">
            <summary>
            Delete value in parameter value collection
            </summary>
            <param name="rowIndex">Index</param>
        </member>
        <member name="P:ExtensionParameter.Name">
            <summary>
            Parameter Name, often used as ID in the UI
            </summary>
        </member>
        <member name="P:ExtensionParameter.Label">
            <summary>
            Used as label in the UI controls
            </summary>
        </member>
        <member name="P:ExtensionParameter.MaxLength">
            <summary>
            Maximum number of characters stored in the value fields
            </summary>
        </member>
        <member name="P:ExtensionParameter.Required">
            <summary>
            Specifies if values for parameter required
            </summary>
        </member>
        <member name="P:ExtensionParameter.KeyField">
            <summary>
            Primary Key field
            </summary>
        </member>
        <member name="P:ExtensionParameter.Values">
            <summary>
            Collection of values for given parameter
            </summary>
        </member>
        <member name="P:ExtensionParameter.ParamType">
            <summary>
            Parameter Type
            </summary>
        </member>
        <member name="P:ExtensionParameter.SelectedValue">
            <summary>
            Selected value in parameter lists (dropdown, listbox etc.)
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.StringDictionaryBehavior.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.StringDictionaryBehavior.SaveSettings(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves String Dictionary to Data Store
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension Id</param>
            <param name="settings">StringDictionary settings</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.StringDictionaryBehavior.GetSettings(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Retreaves StringDictionary object from database or file system
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension Id</param>
            <returns>StringDictionary object as Stream</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.Foaf">
            <summary>
            Based on John Dyer's (http://johndyer.name/) extension.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.WriteFoaf(System.Web.HttpContext,System.String)">
            <summary>
            Writes FOAF data to the output stream
            </summary>
            <param name="context"></param>
            <param name="name"></param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.GetWriter(System.IO.Stream)">
            <summary>
            Creates the necessary startup information for the FOAF document
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.CloseWriter(System.Xml.XmlWriter)">
            <summary>
            Closes up the FOAF document
            </summary>
            <param name="xmlWriter"></param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.WriteFoafPerson(System.Xml.XmlWriter,FoafPerson)">
            <summary>
            Write a FOAF:Person and any friends to the output stream
            </summary>
            <param name="writer"></param>
            <param name="person"></param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Foaf.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:FoafPerson">
            <summary>
            Temporary class for transmitting FOAF attributes
            </summary>
        </member>
        <member name="T:BlogEngine.Core.DataStore.XMLDocumentBehavior">
            <summary>
            Class to encapsulate saving and retreaving 
            XML documents to and from data storage
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.XMLDocumentBehavior.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.XMLDocumentBehavior.SaveSettings(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves XML document to data storage
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension ID</param>
            <param name="settings">Settings as XML document</param>
            <returns>True if saved</returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.XMLDocumentBehavior.GetSettings(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Gets settings from data store
            </summary>
            <param name="exType">Extension Type</param>
            <param name="exId">Extension ID</param>
            <returns>Settings as Stream</returns>
        </member>
        <member name="T:BlogEngine.Core.DataStore.WidgetData">
            <summary>
            Wrap around xml document
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.WidgetData.#ctor">
            <summary>
            Defatul constructor
            </summary>
        </member>
        <member name="P:BlogEngine.Core.DataStore.WidgetData.Settings">
            <summary>
            Settings data
            </summary>
        </member>
        <member name="T:BlogEngine.Core.DataStore.ExtensionType">
            <summary>
            Type of extension
            </summary>
        </member>
        <member name="F:BlogEngine.Core.DataStore.ExtensionType.Extension">
            <summary>
            Extension
            </summary>
        </member>
        <member name="F:BlogEngine.Core.DataStore.ExtensionType.Widget">
            <summary>
            Widget
            </summary>
        </member>
        <member name="F:BlogEngine.Core.DataStore.ExtensionType.Theme">
            <summary>
            Theme
            </summary>
        </member>
        <member name="T:BlogEngine.Core.DataStore.ExtensionSettings">
            <summary>
            Extension settings implementation
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ExtensionSettings.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:BlogEngine.Core.CommentHandlers">
            <summary>
             Rules, Filters and anti-spam services use this class
             to handle adding new comment to the blog
            </summary>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.Listen">
            <summary>
             Initiate adding comment event listener
            </summary>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.ReportMistake(BlogEngine.Core.Comment)">
            <summary>
            Report to service if comment is really spam
            </summary>
            <param name="comment">Comment object</param>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.GetCustomFilter(System.String)">
            <summary>
            Instantiates custom filter object
            </summary>
            <param name="className">Name of the class to instantiate</param>
            <returns>Object as ICustomFilter</returns>
        </member>
        <member name="T:BlogEngine.Core.BlogRollItem">
            <summary>
            BlogRolls are links to outside blogs.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.BlogRollItem"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.#ctor(System.String,System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.BlogRollItem"/> class.
            </summary>
            <param name="Title">The title of the BlogRollItem.</param>
            <param name="Description">The description of the BlogRollItem.</param>
            <param name="BlogUrl">The <see cref="T:System.Uri"/> of the BlogRollItem.</param>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.GetBlogRollItem(System.Guid)">
            <summary>
            Gets the BlogRollItem from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.ValidationRules">
            <summary>
            Reinforces the business rules by adding additional rules to the
            broken rules collection.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.DataSelect(System.Guid)">
            <summary>
            Retrieves the object from the data store and populates it.
            </summary>
            <param name="id">The unique identifier of the object.</param>
            <returns>
            The object that was selected from the data store.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.DataInsert">
            <summary>
            Inserts a new object to the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.DataDelete">
            <summary>
            Deletes the object from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.CompareTo(BlogEngine.Core.BlogRollItem)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has the following meanings: Value Meaning Less than zero This object is 
            less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.Title">
            <summary>
            Gets or sets the Title of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.Description">
            <summary>
            Gets or sets the Description of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.FeedUrl">
            <summary>
            Gets or sets the FeedUrl of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.BlogUrl">
            <summary>
            Gets or sets the BlogUrl of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.Xfn">
            <summary>
            Gets or sets the Xfn of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.SortIndex">
            <summary>
            Gets or sets the SortIndex of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.BlogRolls">
            <summary>
            Gets all of the BlogRollItems from the data store.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpModules.ReferrerModule">
            <summary>
            Summary description for ReferrerModule
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the 
            module that implements <see cref="T:System.Web.IHttpModule"></see>.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"></see> that 
            provides access to the methods, properties, and events common to all application 
            objects within an ASP.NET application
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.context_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpModules.ReferrerModule._SyncRoot">
            <summary>
            Used to thread safe the file operations
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpModules.ReferrerModule._Folder">
            <summary>
            The relative path of the XML file.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.IsSpam(System.Uri,System.Uri)">
            <summary>
            Determines whether the specified referrer is spam.
            </summary>
            <param name="referrer">The referrer.</param>
            <param name="url">The URL.</param>
            <returns>
            	<c>true</c> if the specified referrer is spam; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.OnReferrerRegistered(System.Uri)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpModules.ReferrerModule.ReferrerRegistered">
            <summary>
            Occurs when a visitor enters the website and the referrer is logged.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.BlogBasePage">
            <summary>
            All pages in the custom themes as well as pre-defined pages in the root
            must inherit from this class.
            </summary>
            <remarks>
            The class is responsible for assigning the theme to all
            derived pages as well as adding RSS, RSD, tracking script
            and a whole lot more.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.OnPreInit(System.EventArgs)">
            <summary>
            Assignes the selected theme to the pages.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.OnLoad(System.EventArgs)">
            <summary>
            Adds links and javascript to the HTML header tag.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.OnPreRenderComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Page.PreRenderComplete"></see> event after 
            the <see cref="M:System.Web.UI.Page.OnPreRenderComplete(System.EventArgs)"></see> event and before the page is rendered.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddLocalizationKeys">
            <summary>
            Adds the localization keys to JavaScript for use globally.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.CompressCss">
            <summary>
            Finds all stylesheets in the header and changes the 
            path so it points to css.axd which removes the whitespace.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddMetaContentType">
            <summary>
            Adds the content-type meta tag to the header.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddDefaultLanguages">
            <summary>
            Adds the default stylesheet language
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddMetaTag(System.String,System.String)">
            <summary>
            Add a meta tag to the page's header.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddGenericLink(System.String,System.String,System.String)">
            <summary>
            Adds the generic link to the header.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddGenericLink(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the generic link to the header.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddJavaScriptInclude(System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a JavaScript reference to the HTML head tag.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddStylesheetInclude(System.String)">
            <summary>
            Adds a Stylesheet reference to the HTML head tag.
            </summary>
            <param name="url">The relative URL.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.ResolveScriptUrl(System.String)">
            <summary>
            Resolves the script URL.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddTrackingScript">
            <summary>
            Adds a JavaScript to the bottom of the page at runtime.    
            </summary>
            <remarks>
            You must add the script tags to the BlogSettings.Instance.TrackingScript.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddCustomCodeToHead">
            <summary>
            Adds code to the HTML head section.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.OnError(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.TemplateControl.Error"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Initializes the <see cref="T:System.Web.UI.HtmlTextWriter"></see> object and calls on the child
            controls of the <see cref="T:System.Web.UI.Page"></see> to render.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"></see> that receives the page content.</param>
        </member>
        <member name="T:BlogEngine.Core.DataStore.WidgetSettings">
            <summary>
            WidgetSettings implementation
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.WidgetSettings.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogProviderCollection">
            <summary>
            A collection of all registered providers.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Add a provider to the collection.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogProviderCollection.Item(System.String)">
            <summary>
            Gets a provider by its name.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Ping.Manager">
            <summary>
            Manages to send out trackbacks and then pingbacks if trackbacks aren't supported by the linked site.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Manager.Send(BlogEngine.Core.IPublishable,System.Uri)">
            <summary>
            Sends the trackback or pingback message.
            <remarks>
            It will try to send a trackback message first, and if the refered web page
            doesn't support trackbacks, a pingback is sent.
            </remarks>
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Ping.Manager.urlsRegex">
            <summary>
            Regex used to find all hyperlinks.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Ping.Manager.trackbackLinkRegex">
            <summary>
            Regex used to find the trackback link on a remote web page.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Manager.GetUrlsFromContent(System.String)">
            <summary>
            Gets all the URLs from the specified string.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Manager.GetTrackBackUrlFromPage(System.String)">
            <summary>
            Examines the web page source code to retrieve the trackback link from the RDF.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Manager.ReadFromWeb(System.Uri)">
            <summary>
            Returns the HTML code of a given URL.
            </summary>
            <param name="sourceUrl">The URL you want to extract the html code.</param>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest">
            <summary>
            Obejct is the incoming XML-RPC Request.  Handles parsing the XML-RPC and 
            fills its properties with the values sent in the request.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.#ctor(System.Web.HttpContext)">
            <summary>
            Loads XMLRPCRequest object from HttpContext
            </summary>
            <param name="input">incoming HttpContext</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.ParseRequest(System.Web.HttpContext)">
            <summary>
            Retrieves the content of the input stream
            and return it as plain text.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.LoadXMLRequest(System.String)">
            <summary>
            Loads object properties with contents of passed xml
            </summary>
            <param name="xml">xml doc with methodname and parameters</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.GetPost(System.Xml.XmlNode)">
            <summary>
            Creates a Metaweblog Post object from the XML struct
            </summary>
            <param name="node">XML contains a Metaweblog Post Struct</param>
            <returns>Metaweblog Post Struct Obejct</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.GetPage(System.Xml.XmlNode)">
            <summary>
            Creates a Metaweblog Page object from the XML struct
            </summary>
            <param name="node">XML contains a Metaweblog Page Struct</param>
            <returns>Metaweblog Page Struct Obejct</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.GetMediaObject(System.Xml.XmlNode)">
            <summary>
            Creates a Metaweblog Media object from the XML struct
            </summary>
            <param name="node">XML contains a Metaweblog MediaObject Struct</param>
            <returns>Metaweblog MediaObject Struct Obejct</returns>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.MethodName">
            <summary>
            Name of Called Metaweblog Function
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.AppKey">
            <summary>
            AppKey is a key generated by the calling application.  It is sent with blogger API calls.
            </summary>
            <remarks>
            BlogEngine.NET doesn't require specific AppKeys for API calls.  It is no longer standard practive.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.BlogID">
            <summary>
            ID of the Blog to call the function on.  Since BlogEngine supports only a single blog instance,
            this incoming parameter is not used.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.MediaObject">
            <summary>
            MediaObject is a struct sent by the metaWeblog.newMediaObject function.
            It contains information about the media and the object in a bit array.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.NumberOfPosts">
            <summary>
            Number of post request by the metaWeblog.getRecentPosts function
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.Password">
            <summary>
            Password for user validation
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.Post">
            <summary>
            Metaweblog Post struct containing information post including title, content, and categories.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.Page">
            <summary>
            Metaweblog Page Struct
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.PostID">
            <summary>
            The PostID Guid in string format
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.PageID">
            <summary>
            PageID Guid in string format
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.Publish">
            <summary>
            Publish determines wheter or not a post will be marked as published by BlogEngine.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.UserName">
            <summary>
            Login for user validation
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.Apml">
            <summary>
            Based on John Dyer's (http://johndyer.name/) extension.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Apml.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Apml.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.XmlRoleProvider">
            <summary>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.RoleExists(System.String)">
            <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
            
            <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
            
            <param name="roleName">The name of the role to search for in the data source. </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.GetAllRoles">
            <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
            
            <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
            
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
            
            <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
            
            <param name="roleName">The name of the role to get the list of users for. </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
            
            <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
            
            <param name="username">The user name to search for.</param>
            <param name="roleName">The role to search in.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
            
            <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
            
            <param name="username">The user to return a list of roles for.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
            
            <returns>
            A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.
            </returns>
            
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="roleName">The role to search in.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
            
            <param name="roleNames">A string array of the role names to add the specified user names to. </param>
            <param name="usernames">A string array of user names to be added to the specified roles. </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
            
            <param name="roleNames">A string array of role names to remove the specified user names from. </param>
            <param name="usernames">A string array of user names to be removed from the specified roles. </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
            
            <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
            
            <param name="throwOnPopulatedRole">If true, throw an exception if roleName has one or more members and do not delete roleName.</param>
            <param name="roleName">The name of the role to delete.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.CreateRole(System.String)">
            <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
            
            <param name="roleName">The name of the role to create.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.ReadRoleDataStore">
            <summary>
            Builds the internal cache of users.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.Save">
            <summary>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.ReadMembershipDataStore">
            <summary>
            Only so we can add users to the adminstrators role.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlRoleProvider.ApplicationName">
            <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
            
            <returns>
            The name of the application to store and retrieve role information for.
            </returns>
            
        </member>
        <member name="T:BlogEngine.Core.Web.HttpModules.UrlRewrite">
            <summary>
            Handles pretty URL's and redirects them to the permalinks.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.Init(System.Web.HttpApplication)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.context_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.ExtractTitle(System.Web.HttpContext,System.String)">
            <summary>
            Extracts the title from the requested URL.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.ExtractDate(System.Web.HttpContext)">
            <summary>
            Extracts the year and month from the requested URL and returns that as a DateTime.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.GetQueryString(System.Web.HttpContext)">
            <summary>
            Gets the query string from the requested URL.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.Post">
            <summary>
            A post is an entry on the blog - a blog post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.#ctor">
            <summary>
            The default contstructor assign default values.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.ResetNestedComments">
            <summary>
            Clears all nesting of comments
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.CreateNestedComments">
            <summary>
            Nests comments based on Id and ParentId
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.AddRelations">
            <summary>
            Sets the Previous and Next properties to all posts.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPostsByCategory(System.Guid)">
            <summary>
            Returns all posts in the specified category
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPost(System.Guid)">
            <summary>
            Returs a post based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.IsTitleUnique(System.String)">
            <summary>
            Checks to see if the specified title has already been used
            by another post.
            <remarks>
            Titles must be unique because the title is part of the URL.
            </remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPostsByAuthor(System.String)">
            <summary>
            Returns all posts written by the specified author.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPostsByTag(System.String)">
            <summary>
            Returns all posts tagged with the specified tag.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPostsByDate(System.DateTime,System.DateTime)">
            <summary>
            Returns all posts published between the two dates.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.Rate(System.Int32)">
            <summary>
            Adds a rating to the post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.Import">
            <summary>
            Imports Post (without all standard saving routines
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.Reload">
            <summary>
            Force reload of all posts
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.AddComment(BlogEngine.Core.Comment)">
            <summary>
            Adds a comment to the collection and saves the post.
            </summary>
            <param name="comment">The comment to add to the post.</param>
        </member>
        <member name="M:BlogEngine.Core.Post.UpdateComment(BlogEngine.Core.Comment)">
            <summary>
            Updates a comment in the collection and saves the post.
            </summary>
            <param name="comment">The comment to update in the post.</param>
        </member>
        <member name="M:BlogEngine.Core.Post.ImportComment(BlogEngine.Core.Comment)">
            <summary>
            Imports a comment to comment collection and saves.  Does not
            notify user or run extension events.
            </summary>
            <param name="comment">The comment to add to the post.</param>
        </member>
        <member name="M:BlogEngine.Core.Post.SendNotifications(BlogEngine.Core.Comment)">
            <summary>
            Sends a notification to all visitors  that has registered
            to retrieve notifications for the specific post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.RemoveComment(BlogEngine.Core.Comment)">
            <summary>
            Removes a comment from the collection and saves the post.
            </summary>
            <param name="comment">The comment to remove from the post.</param>
        </member>
        <member name="M:BlogEngine.Core.Post.ApproveComment(BlogEngine.Core.Comment)">
            <summary>
            Approves a Comment for publication.
            </summary>
            <param name="comment">The Comment to approve</param>
        </member>
        <member name="M:BlogEngine.Core.Post.ApproveAllComments">
            <summary>
            Approves all the comments in a post.  Included to save time on the approval process.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.ValidationRules">
            <summary>
            Validates the Post instance.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.DataSelect(System.Guid)">
            <summary>
            Returns a Post based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.DataUpdate">
            <summary>
            Updates the Post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.DataInsert">
            <summary>
            Inserts a new post to the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.DataDelete">
            <summary>
            Deletes the Post from the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.MarkOld">
            <summary>
            Marks the object as being an clean,
            which means not dirty.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.CompareTo(BlogEngine.Core.Post)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. The return value has the following meanings: 
            Value Meaning Less than zero This object is less than the other parameter.Zero 
            This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.OnAddingComment(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.OnCommentAdded(BlogEngine.Core.Comment)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.OnUpdatingComment(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.OnCommentUpdated(BlogEngine.Core.Comment)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.OnRemovingComment(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.OnCommentRemoved(BlogEngine.Core.Comment)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.OnRated(BlogEngine.Core.Post)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.OnServing(BlogEngine.Core.Post,BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.OnServing(BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the Serving event
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Author">
            <summary>
            Gets or sets the Author or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Title">
            <summary>
            Gets or sets the Title or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Description">
            <summary>
            Gets or sets the Description or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Content">
            <summary>
            Gets or sets the Content or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.ApprovedComments">
            <summary>
            A collection of Approved comments for the post sorted by date.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.NotApprovedComments">
            <summary>
            A collection of comments waiting for approval for the post, sorted by date.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Comments">
            <summary>
            A Collection of All Comments for the post
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.NestedComments">
            <summary>
            A collection of the comments that are nested as replies
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Categories">
            <summary>
            An unsorted List of categories.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Tags">
            <summary>
            An unsorted collection of tags.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsCommentsEnabled">
            <summary>
            Gets or sets the EnableComments or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsPublished">
            <summary>
            Gets or sets whether or not the post is published.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Rating">
            <summary>
            Gets or sets the rating or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Raters">
            <summary>
            Gets or sets the number of raters or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Slug">
            <summary>
            Gets or sets the Slug of the Post.
            A Slug is the relative URL used by the posts.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.NotificationEmails">
            <summary>
            Gets a collection of email addresses that is signed up for 
            comment notification on the specific post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsVisible">
            <summary>
            Gets whether or not the post is visible or not.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsVisibleToPublic">
            <summary>
            Gets whether a post is available to visitors not logged into the blog.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Previous">
            <summary>
            Gets the previous post relative to this one based on time.
            <remarks>
            If this post is the oldest, then it returns null.
            </remarks>
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Next">
            <summary>
            Gets the next post relative to this one based on time.
            <remarks>
            If this post is the newest, then it returns null.
            </remarks>
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.PermaLink">
            <summary>
            The absolute permanent link to the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.RelativeLink">
            <summary>
            A relative-to-the-site-root path to the post.
            Only for in-site use.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.AbsoluteLink">
            <summary>
            The absolute link to the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.TrackbackLink">
            <summary>
            The trackback link to the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Posts">
            <summary>
            A sorted collection of all posts in the blog.
            Sorted by date.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsChanged">
            <summary>
            Gets if the Post have been changed.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.AddingComment">
            <summary>
            Occurs before a new comment is added.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.CommentAdded">
            <summary>
            Occurs when a comment is added.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.UpdatingComment">
            <summary>
            Occurs before a new comment is updated.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.CommentUpdated">
            <summary>
            Occurs when a comment is updated.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.RemovingComment">
            <summary>
            Occurs before comment is removed.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.CommentRemoved">
            <summary>
            Occurs when a comment has been removed.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.Rated">
            <summary>
            Occurs when a visitor rates the post.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.Serving">
            <summary>
            Occurs when the post is being served to the output stream.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Page">
            <summary>
            A page is much like a post, but is not part of the
            blog chronology and is more static in nature.
            <remarks>
            Pages can be used for "About" pages or other static
            information.
            </remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.#ctor">
            <summary>
            The contructor sets default values.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.GetPage(System.Guid)">
            <summary>
            Returns a page based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.GetFrontPage">
            <summary>
            Returns the front page if any is available.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.ValidationRules">
            <summary>
            Validates the properties on the Page.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.DataSelect(System.Guid)">
            <summary>
            Retrieves a page form the BlogProvider
            based on the specified id.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.DataInsert">
            <summary>
            Inserts a new page to current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.DataDelete">
            <summary>
            Deletes the page from the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Page.OnServing(BlogEngine.Core.Page,BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.OnServing(BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the Serving event
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Title">
            <summary>
            Gets or sets the Title or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Content">
            <summary>
            Gets or sets the Description or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Description">
            <summary>
            Gets or sets the Description or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Keywords">
            <summary>
            Gets or sets the Keywords or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Parent">
            <summary>
            Gets or sets the parent of the Page. It is used to construct the 
            hierachy of the pages.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.HasParentPage">
             
            Does this post have a parent page?  
              
        </member>
        <member name="P:BlogEngine.Core.Page.HasChildPages">
             
            Does this post have child pages   
              
        </member>
        <member name="P:BlogEngine.Core.Page.Slug">
            <summary>
            Gets or sets the Slug of the Page.
            A Slug is the relative URL used by the pages.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.IsPublished">
            <summary>
            Gets or sets whether or not this page should be published.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.IsVisible">
            <summary>
            Gets whether or not this page should be shown
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Page.IsVisibleToPublic">
            <summary>
            Gets whether or not this page is visible to visitors not logged into the blog.
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Page.IsFrontPage">
            <summary>
            Gets or sets whether or not this page should be displayed on the front page.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.ShowInList">
            <summary>
            Gets or sets whether or not this page should be in the sitemap list.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.RelativeLink">
            <summary>
            A relative-to-the-site-root path to the post.
            Only for in-site use.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.AbsoluteLink">
            <summary>
            The absolute link to the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Pages">
            <summary>
            Gets an unsorted list of all pages.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Page.Serving">
            <summary>
            Occurs when the page is being served to the output stream.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.BlogSettings">
            <summary>
            Represents the configured settings for the blog engine.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.BlogSettings"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.Load">
            <summary>
            Initializes the singleton instance of the <see cref="T:BlogEngine.Core.BlogSettings"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.OnChanged">
            <summary>
            Occurs when the settings have been changed.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.Save">
            <summary>
            Saves the settings to disk.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.Version">
            <summary>
            Returns the BlogEngine.NET version information.
            </summary>
            <value>The BlogEngine.NET major, minor, revision, and build numbers.</value>
            <remarks>The current version is determined by extracting the build version of the BlogEngine.Core assembly.</remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:BlogEngine.Core.BlogSettings"/> class.
            </summary>
            <value>A singleton instance of the <see cref="T:BlogEngine.Core.BlogSettings"/> class.</value>
            <remarks></remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Description">
            <summary>
            Gets or sets the description of the blog.
            </summary>
            <value>A brief synopsis of the blog content.</value>
            <remarks>This value is also used for the description meta tag.</remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableHttpCompression">
            <summary>
            Gets or sets a value indicating if HTTP compression is enabled.
            </summary>
            <value><b>true</b> if compression is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableReferrerTracking">
            <summary>
            Gets or sets a value indicating if referral tracking is enabled.
            </summary>
            <value><b>true</b> if referral tracking is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.NumberOfReferrerDays">
            <summary>
            Gets or sets a value indicating the number of days that referrer information should be stored.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableRelatedPosts">
            <summary>
            Gets or sets a value indicating if related posts are displayed.
            </summary>
            <value><b>true</b> if related posts are displayed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.AlternateFeedUrl">
            <summary>Gets or sets the FeedBurner user name.</summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.TimeStampPostLinks">
            <summary>Gets or sets whether or not to time stamp post links.</summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Name">
            <summary>
            Gets or sets the name of the blog.
            </summary>
            <value>The title of the blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.NumberOfRecentPosts">
            <summary>
            Gets or sets the default number of recent posts to display.
            </summary>
            <value>The number of recent posts to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.NumberOfRecentComments">
            <summary>
            Gets or sets the default number of recent posts to display.
            </summary>
            <value>The number of recent posts to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.PostsPerPage">
            <summary>
            Gets or sets the number of posts to show an each page.
            </summary>
            <value>The number of posts to show an each page.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ShowLivePreview">
            <summary>
            Gets or sets a value indicating if live preview of post is displayed.
            </summary>
            <value><b>true</b> if live previews are displayed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableRating">
            <summary>
            Gets or sets a value indicating if live preview of post is displayed.
            </summary>
            <value><b>true</b> if live previews are displayed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ShowDescriptionInPostList">
            <summary>
            Gets or sets a value indicating if the full post is displayed in lists or only the description/excerpt.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DescriptionCharacters">
            <summary>
            Gets or sets a value indicating how many characters should be shown of the description
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ShowDescriptionInPostListForPostsByTagOrCategory">
            <summary>
            Gets or sets a value indicating if the full post is displayed in lists by tag/category or only the description/excerpt.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DescriptionCharactersForPostsByTagOrCategory">
            <summary>
            Gets or sets a value indicating how many characters should be shown of the description when posts are shown by tag or category.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.StorageLocation">
            <summary>
            Gets or sets the default storage location for blog data.
            </summary>
            <value>The default storage location for blog data.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableEnclosures">
            <summary>
            Enable enclosures for RSS feeds
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.FileExtension">
            <summary>
            The  file extension used for aspx pages
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.AdministratorRole">
            <summary>
            The role that has administrator persmissions
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SyndicationFormat">
            <summary>
            Gets or sets the default syndication format used by the blog.
            </summary>
            <value>The default syndication format used by the blog.</value>
            <remarks>If no value is specified, blog defaults to using RSS 2.0 format.</remarks>
            <seealso cref="T:BlogEngine.Core.SyndicationFormat"/>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Theme">
            <summary>
            Gets or sets the current theme applied to the blog.
            Default theme can be overridden in the query string
            or cookie to let users select different theme
            </summary>
            <value>The configured theme for the blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.MobileTheme">
            <summary>
            Gets or sets the mobile theme.
            </summary>
            <value>The mobile theme.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.RemoveWhitespaceInStyleSheets">
            <summary>
            Gets or sets a value indicating if whitespace in stylesheets should be removed
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CompressWebResource">
            <summary>
            Gets or sets a value indicating whether to compress WebResource.axd
            </summary>
            <value><c>true</c> if [compress web resource]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.UseBlogNameInPageTitles">
            <summary>
            Gets or sets a value indicating if whitespace in stylesheets should be removed
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.RequireSSLMetaWeblogAPI">
            <summary>
            Gets or sets a value indicating whether [require SSL for MetaWeblogAPI connections].
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableOpenSearch">
            <summary>
            Gets or sets a value indicating if whitespace in stylesheets should be removed
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.TrackingScript">
            <summary>
            Gets or sets the tracking script used to collect visitor data.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DisplayCommentsOnRecentPosts">
            <summary>
            Gets or sets a value indicating if whitespace in stylesheets should be removed
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DisplayRatingsOnRecentPosts">
            <summary>
            Gets or sets a value indicating if whitespace in stylesheets should be removed
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ShowPostNavigation">
            <summary>
            Gets or sets a value indicating whether or not to show the post navigation.
            </summary>
            <value><c>true</c> if [show post navigation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.HandleWwwSubdomain">
            <summary>
            Gets or sets how to handle the www subdomain of the url (for SEO purposes).
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnablePingBackSend">
            <summary>
            Gets or sets a value indicating whether [enable ping back send].
            </summary>
            <value><c>true</c> if [enable ping back send]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnablePingBackReceive">
            <summary>
            Gets or sets a value indicating whether [enable ping back receive].
            </summary>
            <value>
            	<c>true</c> if [enable ping back receive]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableTrackBackSend">
            <summary>
            Gets or sets a value indicating whether [enable track back send].
            </summary>
            <value>
            	<c>true</c> if [enable track back send]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableTrackBackReceive">
            <summary>
            Gets or sets a value indicating whether [enable track back receive].
            </summary>
            <value>
            	<c>true</c> if [enable track back receive]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableErrorLogging">
            <summary>
            Gets or sets a value indicating whether unhandled errors are logged.
            </summary>
            <value>
            	<c>true</c> if unhandled errors are to be logged otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Email">
            <summary>
            Gets or sets the e-mail address notifications are sent to.
            </summary>
            <value>The e-mail address notifications are sent to.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SendMailOnComment">
            <summary>
            Gets or sets a value indicating if an enail is sent when a comment is added to a post.
            </summary>
            <value><b>true</b> if email notification of new comments is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SmtpPassword">
            <summary>
            Gets or sets the password used to connect to the SMTP server.
            </summary>
            <value>The password used to connect to the SMTP server.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SmtpServer">
            <summary>
            Gets or sets the DNS name or IP address of the SMTP server used to send notification emails.
            </summary>
            <value>The DNS name or IP address of the SMTP server used to send notification emails.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SmtpServerPort">
            <summary>
            Gets or sets the DNS name or IP address of the SMTP server used to send notification emails.
            </summary>
            <value>The DNS name or IP address of the SMTP server used to send notification emails.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SmtpUserName">
            <summary>
            Gets or sets the user name used to connect to the SMTP server.
            </summary>
            <value>The user name used to connect to the SMTP server.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableSsl">
            <summary>
            Gets or sets a value indicating if SSL is enabled for sending e-mails
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EmailSubjectPrefix">
            <summary>
            Gets or sets the email subject prefix.
            </summary>
            <value>The email subject prefix.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DaysCommentsAreEnabled">
            <summary>
            Gets or sets the number of days that a post accepts comments.
            </summary>
            <value>The number of days that a post accepts comments.</value>
            <remarks>After this time period has expired, comments on a post are disabled.</remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableCountryInComments">
            <summary>
            Gets or sets a value indicating if dispay of the country of commenter is enabled.
            </summary>
            <value><b>true</b> if commenter country display is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.IsCoCommentEnabled">
            <summary>
            Gets or sets a value indicating if CoComment support is enabled.
            </summary>
            <value><b>true</b> if CoComment support is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.IsCommentsEnabled">
            <summary>
            Gets or sets a value indicating if comments are enabled for posts.
            </summary>
            <value><b>true</b> if comments can be made against a post, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableCommentsModeration">
            <summary>
            Gets or sets a value indicating if comments moderation is used for posts.
            </summary>
            <value><b>true</b> if comments are moderated for posts, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Avatar">
            <summary>
            Gets or sets a value indicating if Gravatars are enabled or not.
            </summary>
            <value><b>true</b> if Gravatars are enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.IsCommentNestingEnabled">
            <summary>
            Gets or sets a value indicated if comments should be displayed as nested.	
            </summary>
            <value><b>true</b> if comments should be displayed as nested, <b>false</b> for flat comments.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.TrustAuthenticatedUsers">
            <summary>
             If true comments from authenticated users always approved
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CommentWhiteListCount">
            <summary>
             Number of comments approved to add user to white list
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CommentBlackListCount">
            <summary>
             Number of comments approved to add user to white list
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CommentsPerPage">
            <summary>
            Number of comments per page displayed in the comments asmin section
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:BlogEngine.Core.BlogSettings.ModerationType" -->
        <member name="P:BlogEngine.Core.BlogSettings.CommentReportMistakes">
            <summary>
            Enables to report mistakes back to service
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.BlogrollMaxLength">
            <summary>
            Gets or sets the maximum number of characters that are displayed from a blog-roll retrieved post.
            </summary>
            <value>The maximum number of characters to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.BlogrollUpdateMinutes">
            <summary>
            Gets or sets the number of minutes to wait before polling blog-roll sources for changes.
            </summary>
            <value>The number of minutes to wait before polling blog-roll sources for changes.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.BlogrollVisiblePosts">
            <summary>
            Gets or sets the number of posts to display from a blog-roll source.
            </summary>
            <value>The number of posts to display from a blog-roll source.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableCommentSearch">
            <summary>
            Gets or sets a value indicating if search of post comments is enabled.
            </summary>
            <value><b>true</b> if post comments can be searched, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SearchButtonText">
            <summary>
            Gets or sets the search button text to be displayed.
            </summary>
            <value>The search button text to be displayed.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SearchCommentLabelText">
            <summary>
            Gets or sets the search comment label text to display.
            </summary>
            <value>The search comment label text to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SearchDefaultText">
            <summary>
            Gets or sets the default search text to display.
            </summary>
            <value>The default search text to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Endorsement">
            <summary>
            Gets or sets the URI of a web log that the author of this web log is promoting.
            </summary>
            <value>The <see cref="T:System.Uri"/> of a web log that the author of this web log is promoting.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.PostsPerFeed">
            <summary>
            Gets or sets the maximum number of characters that are displayed from a blog-roll retrieved post.
            </summary>
            <value>The maximum number of characters to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.AuthorName">
            <summary>
            Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Language">
            <summary>
            Gets or sets the language this blog is written in.
            </summary>
            <value>The language this blog is written in.</value>
            <remarks>
                Recommended best practice for the values of the Language element is defined by RFC 1766 [RFC1766] which includes a two-letter Language Code (taken from the ISO 639 standard [ISO639]), 
                followed optionally, by a two-letter Country Code (taken from the ISO 3166 standard [ISO3166]).
            </remarks>
            <example>en-US</example>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.GeocodingLatitude">
            <summary>
            Gets or sets the latitude component of the geocoding position for this blog.
            </summary>
            <value>The latitude value.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.GeocodingLongitude">
            <summary>
            Gets or sets the longitude component of the geocoding position for this blog.
            </summary>
            <value>The longitude value.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ContactFormMessage">
            <summary>
            Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ContactThankMessage">
            <summary>
            Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.HtmlHeader">
            <summary>
            Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Culture">
            <summary>
            Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Timezone">
            <summary>
            Gets or sets the maximum number of characters that are displayed from a blog-roll retrieved post.
            </summary>
            <value>The maximum number of characters to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableContactAttachments">
            <summary>
            Gets or sets whether or not to allow visitors to send attachments via the contact form.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogProviderSection">
            <summary>
            A configuration section for web.config.
            </summary>
            <remarks>
            In the config section you can specify the provider you 
            want to use for BlogEngine.NET.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogProviderSection.Providers">
            <summary>
            A collection of registered providers.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogProviderSection.DefaultProvider">
            <summary>
            The name of the default provider
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.OpmlHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.OpmlHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
            implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> 
            object that provides references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.OpmlHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
    </members>
</doc>
